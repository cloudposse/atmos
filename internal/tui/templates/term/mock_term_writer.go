// Code generated by MockGen. DO NOT EDIT.
// Source: term_writer.go
//
// Generated by this command:
//
//	mockgen -source=term_writer.go -destination=mock_term_writer.go -package=term
//

// Package term is a generated GoMock package.
package term

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTTYDetector is a mock of TTYDetector interface.
type MockTTYDetector struct {
	ctrl     *gomock.Controller
	recorder *MockTTYDetectorMockRecorder
	isgomock struct{}
}

// MockTTYDetectorMockRecorder is the mock recorder for MockTTYDetector.
type MockTTYDetectorMockRecorder struct {
	mock *MockTTYDetector
}

// NewMockTTYDetector creates a new mock instance.
func NewMockTTYDetector(ctrl *gomock.Controller) *MockTTYDetector {
	mock := &MockTTYDetector{ctrl: ctrl}
	mock.recorder = &MockTTYDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTTYDetector) EXPECT() *MockTTYDetectorMockRecorder {
	return m.recorder
}

// IsTTYForStderr mocks base method.
func (m *MockTTYDetector) IsTTYForStderr() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTTYForStderr")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTTYForStderr indicates an expected call of IsTTYForStderr.
func (mr *MockTTYDetectorMockRecorder) IsTTYForStderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTTYForStderr", reflect.TypeOf((*MockTTYDetector)(nil).IsTTYForStderr))
}

// IsTTYForStdin mocks base method.
func (m *MockTTYDetector) IsTTYForStdin() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTTYForStdin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTTYForStdin indicates an expected call of IsTTYForStdin.
func (mr *MockTTYDetectorMockRecorder) IsTTYForStdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTTYForStdin", reflect.TypeOf((*MockTTYDetector)(nil).IsTTYForStdin))
}

// IsTTYForStdout mocks base method.
func (m *MockTTYDetector) IsTTYForStdout() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTTYForStdout")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTTYForStdout indicates an expected call of IsTTYForStdout.
func (mr *MockTTYDetectorMockRecorder) IsTTYForStdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTTYForStdout", reflect.TypeOf((*MockTTYDetector)(nil).IsTTYForStdout))
}
