// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-git/go-git/v5/storage (interfaces: Storer)

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	config "github.com/go-git/go-git/v5/config"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	index "github.com/go-git/go-git/v5/plumbing/format/index"
	storer "github.com/go-git/go-git/v5/plumbing/storer"
	storage "github.com/go-git/go-git/v5/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// AddAlternate mocks base method.
func (m *MockStorer) AddAlternate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlternate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAlternate indicates an expected call of AddAlternate.
func (mr *MockStorerMockRecorder) AddAlternate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlternate", reflect.TypeOf((*MockStorer)(nil).AddAlternate), arg0)
}

// CheckAndSetReference mocks base method.
func (m *MockStorer) CheckAndSetReference(arg0, arg1 *plumbing.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndSetReference", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAndSetReference indicates an expected call of CheckAndSetReference.
func (mr *MockStorerMockRecorder) CheckAndSetReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndSetReference", reflect.TypeOf((*MockStorer)(nil).CheckAndSetReference), arg0, arg1)
}

// Config mocks base method.
func (m *MockStorer) Config() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockStorerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockStorer)(nil).Config))
}

// CountLooseRefs mocks base method.
func (m *MockStorer) CountLooseRefs() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLooseRefs")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLooseRefs indicates an expected call of CountLooseRefs.
func (mr *MockStorerMockRecorder) CountLooseRefs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLooseRefs", reflect.TypeOf((*MockStorer)(nil).CountLooseRefs))
}

// EncodedObject mocks base method.
func (m *MockStorer) EncodedObject(arg0 plumbing.ObjectType, arg1 plumbing.Hash) (plumbing.EncodedObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodedObject", arg0, arg1)
	ret0, _ := ret[0].(plumbing.EncodedObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodedObject indicates an expected call of EncodedObject.
func (mr *MockStorerMockRecorder) EncodedObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedObject", reflect.TypeOf((*MockStorer)(nil).EncodedObject), arg0, arg1)
}

// EncodedObjectSize mocks base method.
func (m *MockStorer) EncodedObjectSize(arg0 plumbing.Hash) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodedObjectSize", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodedObjectSize indicates an expected call of EncodedObjectSize.
func (mr *MockStorerMockRecorder) EncodedObjectSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedObjectSize", reflect.TypeOf((*MockStorer)(nil).EncodedObjectSize), arg0)
}

// HasEncodedObject mocks base method.
func (m *MockStorer) HasEncodedObject(arg0 plumbing.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEncodedObject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HasEncodedObject indicates an expected call of HasEncodedObject.
func (mr *MockStorerMockRecorder) HasEncodedObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEncodedObject", reflect.TypeOf((*MockStorer)(nil).HasEncodedObject), arg0)
}

// Index mocks base method.
func (m *MockStorer) Index() (*index.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(*index.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockStorerMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockStorer)(nil).Index))
}

// IterEncodedObjects mocks base method.
func (m *MockStorer) IterEncodedObjects(arg0 plumbing.ObjectType) (storer.EncodedObjectIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IterEncodedObjects", arg0)
	ret0, _ := ret[0].(storer.EncodedObjectIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IterEncodedObjects indicates an expected call of IterEncodedObjects.
func (mr *MockStorerMockRecorder) IterEncodedObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterEncodedObjects", reflect.TypeOf((*MockStorer)(nil).IterEncodedObjects), arg0)
}

// IterReferences mocks base method.
func (m *MockStorer) IterReferences() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IterReferences")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IterReferences indicates an expected call of IterReferences.
func (mr *MockStorerMockRecorder) IterReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterReferences", reflect.TypeOf((*MockStorer)(nil).IterReferences))
}

// Module mocks base method.
func (m *MockStorer) Module(arg0 string) (storage.Storer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Module", arg0)
	ret0, _ := ret[0].(storage.Storer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Module indicates an expected call of Module.
func (mr *MockStorerMockRecorder) Module(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Module", reflect.TypeOf((*MockStorer)(nil).Module), arg0)
}

// NewEncodedObject mocks base method.
func (m *MockStorer) NewEncodedObject() plumbing.EncodedObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEncodedObject")
	ret0, _ := ret[0].(plumbing.EncodedObject)
	return ret0
}

// NewEncodedObject indicates an expected call of NewEncodedObject.
func (mr *MockStorerMockRecorder) NewEncodedObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEncodedObject", reflect.TypeOf((*MockStorer)(nil).NewEncodedObject))
}

// PackRefs mocks base method.
func (m *MockStorer) PackRefs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackRefs")
	ret0, _ := ret[0].(error)
	return ret0
}

// PackRefs indicates an expected call of PackRefs.
func (mr *MockStorerMockRecorder) PackRefs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackRefs", reflect.TypeOf((*MockStorer)(nil).PackRefs))
}

// Reference mocks base method.
func (m *MockStorer) Reference(arg0 plumbing.ReferenceName) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference", arg0)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reference indicates an expected call of Reference.
func (mr *MockStorerMockRecorder) Reference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockStorer)(nil).Reference), arg0)
}

// RemoveReference mocks base method.
func (m *MockStorer) RemoveReference(arg0 plumbing.ReferenceName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReference indicates an expected call of RemoveReference.
func (mr *MockStorerMockRecorder) RemoveReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReference", reflect.TypeOf((*MockStorer)(nil).RemoveReference), arg0)
}

// SetConfig mocks base method.
func (m *MockStorer) SetConfig(arg0 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockStorerMockRecorder) SetConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockStorer)(nil).SetConfig), arg0)
}

// SetEncodedObject mocks base method.
func (m *MockStorer) SetEncodedObject(arg0 plumbing.EncodedObject) (plumbing.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEncodedObject", arg0)
	ret0, _ := ret[0].(plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEncodedObject indicates an expected call of SetEncodedObject.
func (mr *MockStorerMockRecorder) SetEncodedObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncodedObject", reflect.TypeOf((*MockStorer)(nil).SetEncodedObject), arg0)
}

// SetIndex mocks base method.
func (m *MockStorer) SetIndex(arg0 *index.Index) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIndex indicates an expected call of SetIndex.
func (mr *MockStorerMockRecorder) SetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*MockStorer)(nil).SetIndex), arg0)
}

// SetReference mocks base method.
func (m *MockStorer) SetReference(arg0 *plumbing.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReference indicates an expected call of SetReference.
func (mr *MockStorerMockRecorder) SetReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReference", reflect.TypeOf((*MockStorer)(nil).SetReference), arg0)
}

// SetShallow mocks base method.
func (m *MockStorer) SetShallow(arg0 []plumbing.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShallow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetShallow indicates an expected call of SetShallow.
func (mr *MockStorerMockRecorder) SetShallow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShallow", reflect.TypeOf((*MockStorer)(nil).SetShallow), arg0)
}

// Shallow mocks base method.
func (m *MockStorer) Shallow() ([]plumbing.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shallow")
	ret0, _ := ret[0].([]plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shallow indicates an expected call of Shallow.
func (mr *MockStorerMockRecorder) Shallow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shallow", reflect.TypeOf((*MockStorer)(nil).Shallow))
}
