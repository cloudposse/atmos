// Code generated by MockGen. DO NOT EDIT.
// Source: describe_workflows.go
//
// Generated by this command:
//
//	mockgen -source=describe_workflows.go -destination=mock_describe_workflows.go -package=exec
//

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockDescribeWorkflowsExec is a mock of DescribeWorkflowsExec interface.
type MockDescribeWorkflowsExec struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeWorkflowsExecMockRecorder
	isgomock struct{}
}

// MockDescribeWorkflowsExecMockRecorder is the mock recorder for MockDescribeWorkflowsExec.
type MockDescribeWorkflowsExecMockRecorder struct {
	mock *MockDescribeWorkflowsExec
}

// NewMockDescribeWorkflowsExec creates a new mock instance.
func NewMockDescribeWorkflowsExec(ctrl *gomock.Controller) *MockDescribeWorkflowsExec {
	mock := &MockDescribeWorkflowsExec{ctrl: ctrl}
	mock.recorder = &MockDescribeWorkflowsExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeWorkflowsExec) EXPECT() *MockDescribeWorkflowsExecMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDescribeWorkflowsExec) Execute(arg0 *schema.AtmosConfiguration, arg1 *DescribeWorkflowsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDescribeWorkflowsExecMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDescribeWorkflowsExec)(nil).Execute), arg0, arg1)
}
