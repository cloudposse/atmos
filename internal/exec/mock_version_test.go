// Code generated by MockGen. DO NOT EDIT.
// Source: version_test.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVersionExecutor is a mock of VersionExecutor interface.
type MockVersionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockVersionExecutorMockRecorder
}

// MockVersionExecutorMockRecorder is the mock recorder for MockVersionExecutor.
type MockVersionExecutorMockRecorder struct {
	mock *MockVersionExecutor
}

// NewMockVersionExecutor creates a new mock instance.
func NewMockVersionExecutor(ctrl *gomock.Controller) *MockVersionExecutor {
	mock := &MockVersionExecutor{ctrl: ctrl}
	mock.recorder = &MockVersionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionExecutor) EXPECT() *MockVersionExecutorMockRecorder {
	return m.recorder
}

// GetLatestGitHubRepoRelease mocks base method.
func (m *MockVersionExecutor) GetLatestGitHubRepoRelease() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestGitHubRepoRelease")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestGitHubRepoRelease indicates an expected call of GetLatestGitHubRepoRelease.
func (mr *MockVersionExecutorMockRecorder) GetLatestGitHubRepoRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestGitHubRepoRelease", reflect.TypeOf((*MockVersionExecutor)(nil).GetLatestGitHubRepoRelease))
}

// PrintMessage mocks base method.
func (m *MockVersionExecutor) PrintMessage(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintMessage", message)
}

// PrintMessage indicates an expected call of PrintMessage.
func (mr *MockVersionExecutorMockRecorder) PrintMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMessage", reflect.TypeOf((*MockVersionExecutor)(nil).PrintMessage), message)
}

// PrintMessageToUpgradeToAtmosLatestRelease mocks base method.
func (m *MockVersionExecutor) PrintMessageToUpgradeToAtmosLatestRelease(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintMessageToUpgradeToAtmosLatestRelease", version)
}

// PrintMessageToUpgradeToAtmosLatestRelease indicates an expected call of PrintMessageToUpgradeToAtmosLatestRelease.
func (mr *MockVersionExecutorMockRecorder) PrintMessageToUpgradeToAtmosLatestRelease(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMessageToUpgradeToAtmosLatestRelease", reflect.TypeOf((*MockVersionExecutor)(nil).PrintMessageToUpgradeToAtmosLatestRelease), version)
}

// PrintStyledText mocks base method.
func (m *MockVersionExecutor) PrintStyledText(text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintStyledText", text)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintStyledText indicates an expected call of PrintStyledText.
func (mr *MockVersionExecutorMockRecorder) PrintStyledText(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintStyledText", reflect.TypeOf((*MockVersionExecutor)(nil).PrintStyledText), text)
}
