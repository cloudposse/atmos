// Code generated by MockGen. DO NOT EDIT.
// Source: terraform_state_getter.go
//
// Generated by this command:
//
//	mockgen -source=terraform_state_getter.go -destination=mock_terraform_state_getter.go -package=exec
//

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockTerraformStateGetter is a mock of TerraformStateGetter interface.
type MockTerraformStateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformStateGetterMockRecorder
	isgomock struct{}
}

// MockTerraformStateGetterMockRecorder is the mock recorder for MockTerraformStateGetter.
type MockTerraformStateGetterMockRecorder struct {
	mock *MockTerraformStateGetter
}

// NewMockTerraformStateGetter creates a new mock instance.
func NewMockTerraformStateGetter(ctrl *gomock.Controller) *MockTerraformStateGetter {
	mock := &MockTerraformStateGetter{ctrl: ctrl}
	mock.recorder = &MockTerraformStateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerraformStateGetter) EXPECT() *MockTerraformStateGetterMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockTerraformStateGetter) GetState(atmosConfig *schema.AtmosConfiguration, yamlFunc, stack, component, output string, skipCache bool, authContext *schema.AuthContext) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", atmosConfig, yamlFunc, stack, component, output, skipCache, authContext)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockTerraformStateGetterMockRecorder) GetState(atmosConfig, yamlFunc, stack, component, output, skipCache, authContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockTerraformStateGetter)(nil).GetState), atmosConfig, yamlFunc, stack, component, output, skipCache, authContext)
}
