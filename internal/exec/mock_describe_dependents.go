// Code generated by MockGen. DO NOT EDIT.
// Source: describe_dependents.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDescribeDependentsExec is a mock of DescribeDependentsExec interface.
type MockDescribeDependentsExec struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeDependentsExecMockRecorder
}

// MockDescribeDependentsExecMockRecorder is the mock recorder for MockDescribeDependentsExec.
type MockDescribeDependentsExecMockRecorder struct {
	mock *MockDescribeDependentsExec
}

// NewMockDescribeDependentsExec creates a new mock instance.
func NewMockDescribeDependentsExec(ctrl *gomock.Controller) *MockDescribeDependentsExec {
	mock := &MockDescribeDependentsExec{ctrl: ctrl}
	mock.recorder = &MockDescribeDependentsExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeDependentsExec) EXPECT() *MockDescribeDependentsExecMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDescribeDependentsExec) Execute(describeDependentsExecProps *DescribeDependentsExecProps) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", describeDependentsExecProps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDescribeDependentsExecMockRecorder) Execute(describeDependentsExecProps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDescribeDependentsExec)(nil).Execute), describeDependentsExecProps)
}
