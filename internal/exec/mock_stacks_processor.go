// Code generated by MockGen. DO NOT EDIT.
// Source: stacks_processor.go
//
// Generated by this command:
//
//	mockgen -source=stacks_processor.go -destination=mock_stacks_processor.go -package=exec
//

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockStacksProcessor is a mock of StacksProcessor interface.
type MockStacksProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockStacksProcessorMockRecorder
	isgomock struct{}
}

// MockStacksProcessorMockRecorder is the mock recorder for MockStacksProcessor.
type MockStacksProcessorMockRecorder struct {
	mock *MockStacksProcessor
}

// NewMockStacksProcessor creates a new mock instance.
func NewMockStacksProcessor(ctrl *gomock.Controller) *MockStacksProcessor {
	mock := &MockStacksProcessor{ctrl: ctrl}
	mock.recorder = &MockStacksProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStacksProcessor) EXPECT() *MockStacksProcessorMockRecorder {
	return m.recorder
}

// ExecuteDescribeStacks mocks base method.
func (m *MockStacksProcessor) ExecuteDescribeStacks(atmosConfig *schema.AtmosConfiguration, filterByStack string, components, componentTypes, sections []string, ignoreMissingFiles, processTemplates, processYamlFunctions, includeEmptyStacks bool, skip []string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDescribeStacks", atmosConfig, filterByStack, components, componentTypes, sections, ignoreMissingFiles, processTemplates, processYamlFunctions, includeEmptyStacks, skip)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteDescribeStacks indicates an expected call of ExecuteDescribeStacks.
func (mr *MockStacksProcessorMockRecorder) ExecuteDescribeStacks(atmosConfig, filterByStack, components, componentTypes, sections, ignoreMissingFiles, processTemplates, processYamlFunctions, includeEmptyStacks, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDescribeStacks", reflect.TypeOf((*MockStacksProcessor)(nil).ExecuteDescribeStacks), atmosConfig, filterByStack, components, componentTypes, sections, ignoreMissingFiles, processTemplates, processYamlFunctions, includeEmptyStacks, skip)
}
