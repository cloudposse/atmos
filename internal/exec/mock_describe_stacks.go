// Code generated by MockGen. DO NOT EDIT.
// Source: describe_stacks.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockDescribeStacksExec is a mock of DescribeStacksExec interface.
type MockDescribeStacksExec struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeStacksExecMockRecorder
}

// MockDescribeStacksExecMockRecorder is the mock recorder for MockDescribeStacksExec.
type MockDescribeStacksExecMockRecorder struct {
	mock *MockDescribeStacksExec
}

// NewMockDescribeStacksExec creates a new mock instance.
func NewMockDescribeStacksExec(ctrl *gomock.Controller) *MockDescribeStacksExec {
	mock := &MockDescribeStacksExec{ctrl: ctrl}
	mock.recorder = &MockDescribeStacksExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeStacksExec) EXPECT() *MockDescribeStacksExecMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDescribeStacksExec) Execute(atmosConfig schema.AtmosConfiguration, args *DescribeStacksArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", atmosConfig, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDescribeStacksExecMockRecorder) Execute(atmosConfig, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDescribeStacksExec)(nil).Execute), atmosConfig, args)
}
