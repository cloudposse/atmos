// Code generated by MockGen. DO NOT EDIT.
// Source: terraform_output_getter.go
//
// Generated by this command:
//
//	mockgen -source=terraform_output_getter.go -destination=mock_terraform_output_getter.go -package=exec
//

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockTerraformOutputGetter is a mock of TerraformOutputGetter interface.
type MockTerraformOutputGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformOutputGetterMockRecorder
	isgomock struct{}
}

// MockTerraformOutputGetterMockRecorder is the mock recorder for MockTerraformOutputGetter.
type MockTerraformOutputGetterMockRecorder struct {
	mock *MockTerraformOutputGetter
}

// NewMockTerraformOutputGetter creates a new mock instance.
func NewMockTerraformOutputGetter(ctrl *gomock.Controller) *MockTerraformOutputGetter {
	mock := &MockTerraformOutputGetter{ctrl: ctrl}
	mock.recorder = &MockTerraformOutputGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerraformOutputGetter) EXPECT() *MockTerraformOutputGetterMockRecorder {
	return m.recorder
}

// GetOutput mocks base method.
func (m *MockTerraformOutputGetter) GetOutput(atmosConfig *schema.AtmosConfiguration, stack, component, output string, skipCache bool, authContext *schema.AuthContext) (any, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", atmosConfig, stack, component, output, skipCache, authContext)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockTerraformOutputGetterMockRecorder) GetOutput(atmosConfig, stack, component, output, skipCache, authContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockTerraformOutputGetter)(nil).GetOutput), atmosConfig, stack, component, output, skipCache, authContext)
}
