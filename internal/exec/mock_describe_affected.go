// Code generated by MockGen. DO NOT EDIT.
// Source: describe_affected.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDescribeAffectedExec is a mock of DescribeAffectedExec interface.
type MockDescribeAffectedExec struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeAffectedExecMockRecorder
}

// MockDescribeAffectedExecMockRecorder is the mock recorder for MockDescribeAffectedExec.
type MockDescribeAffectedExecMockRecorder struct {
	mock *MockDescribeAffectedExec
}

// NewMockDescribeAffectedExec creates a new mock instance.
func NewMockDescribeAffectedExec(ctrl *gomock.Controller) *MockDescribeAffectedExec {
	mock := &MockDescribeAffectedExec{ctrl: ctrl}
	mock.recorder = &MockDescribeAffectedExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeAffectedExec) EXPECT() *MockDescribeAffectedExecMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDescribeAffectedExec) Execute(arg0 DescribeAffectedCmdArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDescribeAffectedExecMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDescribeAffectedExec)(nil).Execute), arg0)
}
