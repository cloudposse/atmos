name: atmos

license: APACHE2

# logo: docs/img/atmos-logo-128.svg

github_repo: cloudposse/atmos

badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse/atmos.svg?style=for-the-badge
    url: https://github.com/cloudposse/atmos/releases/latest
  - name: "Last Updated"
    image: https://img.shields.io/github/last-commit/cloudposse/atmos/master?style=for-the-badge
    url: https://github.com/cloudposse/atmos/commits/master/
  - name: Tests
    image: https://img.shields.io/github/actions/workflow/status/cloudposse/atmos/test.yml?style=for-the-badge
    url: https://github.com/cloudposse/atmos/actions/workflows/test.yml
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com

categories:
  - cli
  - automation
  - cloud
  - devops
  - workflow
  - terraform
  - helm
  - helmfile
  - kubernetes
  - aws

# Screenshots
screenshots:
  - name: "Demo"
    description: "<br/>Example of running atmos to describe infrastructure."
    url: "docs/demo.gif"

description: |-
  > ### Automated Terraform Management & Orchestration Software (ATMOS)

  Atmos simplifies complex cloud architectures and DevOps workflows into [intuitive CLI commands](https://atmos.tools/category/cli).
  Its strength in managing [DRY configurations at scale](https://atmos.tools/category/core-concepts/) is supported by robust
  [design patterns](https://atmos.tools/design-patterns/), comprehensive [documentation](https://atmos.tools/), and a
  [passionate community](https://slack.cloudposse.com/), making it a versatile [tool for both startups and enterprises](https://cloudposse.com/).
  Atmos is extensible to accommodate any tooling, including enterprise-scale Terraform, and includes
  [policy controls](https://atmos.tools/core-concepts/components/validation), [vendoring](https://atmos.tools/core-concepts/vendoring/),
  and [GitOps capabilities](https://atmos.tools/category/github-actions) out of the box. Everything is open source and free.

introduction: |-

  [Atmos](https://atmos.tools) centralizes the DevOps chain and cloud automation/orchestration into a robust command-line tool,
  streamlining environments and workflows into straightforward CLI commands. Leveraging advanced hierarchical configurations,
  it efficiently orchestrates both local and CI/CD pipeline tasks, optimizing infrastructure management for engineers and cloud 
  architects alike. You can then run the CLI anywhere, such as locally or in CI/CD.

  The Atmos project consists of a command-line tool, a `Go` library, and even a terraform provider.  It provides numerous
  [conventions](https://atmos.tools/design-patterns/) to help you provision, manage, and orchestrate workflows across various toolchains.
  You can even access the configurations natively from within terraform using our [`terraform-provider-utils`](https://github.com/cloudposse/terraform-provider-utils/).

  [Cloud Posse](https://cloudposse.com/) uses this tool extensively for automating cloud infrastructure with
  [Terraform](https://www.hashicorp.com/products/terraform) and [Kubernetes](https://kubernetes.io/), but it can be used to automate any complex workflow.

  > [!TIP]
  > ### Did you know?
  >
  > By leveraging Atmos in conjunction with Cloud Posse's [*expertise in AWS*](https://cloudposse.com),
  > [*terraform blueprints*](https://cloudposse.com/services/), and our [*knowledgable community*](https://slack.cloudposse.com), teams can achieve
  > operational mastery and innovation faster, transforming their infrastructure management practices into a competitive advantage.

  ## Use Cases

  Atmos has consistently demonstrated its effectiveness in addressing these key use-cases, showcasing its adaptability and
  strength in the cloud infrastructure and DevOps domains:

  - **Managing Large Multi-Account Cloud Environments:** Suitable for organizations using multiple cloud accounts to separate different
    projects or stages of development.
  - **Cross-Platform Cloud Architectures:** Ideal for businesses that use services across AWS, GCP, Azure, etc., to build a cohesive system.
  - **Multi-Tenant Systems for SaaS:** Perfect for SaaS companies that need to securely host multiple customers within the same infrastructure.
  - **Stable Multi-Region Deployments:** Ensures high availability and disaster recovery by spanning cloud services across different
    geographical regions.
  - **Compliant Infrastructure for Regulated Industries:** Provides a robust base for developing vetted, compliant configurations that
    align with SOC2, HIPAA, HITRUST, PCI, and other regulatory standards. These configurations, accessible through the service catalog,
    empower anyone constructing services on this foundation to achieve and maintain strict compliance with ease.
  - **Empowering Teams with Self-Service Infrastructure:** Allows teams to manage their infrastructure needs independently, using
    predefined templates and policies.
  - **Streamlining Deployment with Service Catalogs, Landing Zones, and Blueprints:** Provides ready-to-use templates and guidelines for
    setting up cloud environments quickly and consistently.
  
  > [!TIP]
  > Don't see your use-case listed? Ask us in the [`#atmos`](https://slack.cloudposse.com) Slack channel,
  > or [join us for "Office Hours"](https://cloudposse.com/office-hours/) every week.


  Moreover, `atmos` is not only a command-line interface for managing clouds and clusters. It provides many useful patterns
  and best practices, such as:
  - Enforces a project structure convention, so everybody knows where to find things.
  - Provides clear separation of configuration from code, so the same code is easily deployed to different regions, environments and stages
  - It can be extended to include new features, commands, and workflows
  - The commands have a clean, consistent and easy to understand syntax
  - The CLI code is modular and self-documenting

  ## Documentation

  Find all documentation at: [atmos.tools](https://atmos.tools)

contributors: []
