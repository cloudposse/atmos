name: atmos

license: APACHE2

# logo: docs/img/atmos-logo-128.svg

github_repo: cloudposse/atmos

badges:
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse/atmos.svg?style=for-the-badge
    url: https://github.com/cloudposse/atmos/releases/latest
  - name: "Last Updated"
    image: https://img.shields.io/github/last-commit/cloudposse/.github/main?style=for-the-badge
    url: https://github.com/cloudposse/.github/commits/main/
  - name: Tests
    image: https://img.shields.io/github/actions/workflow/status/cloudposse/atmos/test.yml?style=for-the-badge
    url: https://github.com/cloudposse/atmos/actions/workflows/test.yml

categories:
  - cli
  - automation
  - cloud
  - devops
  - workflow
  - terraform
  - helm
  - helmfile
  - kubernetes
  - aws

# Screenshots
screenshots:
  - name: "Demo"
    description: "<br/>Example of running atmos to describe infrastructure."
    url: "docs/demo.gif"

description: |-
  
  Atmos simplifies complex cloud architectures and DevOps workflows into [intuitive CLI commands](https://atmos.tools/category/cli). Its strength in managing [DRY configurations at scale](https://atmos.tools/category/core-concepts/) is supported by robust [design patterns](https://atmos.tools/design-patterns/), comprehensive [documentation](https://atmos.tools/), and a [passionate community](https://slack.cloudposse.com/), making it a versatile [tool for both startups and enterprises](https://cloudposse.com/). Atmos is extensible to accommodate any tooling, including enterprise-scale Terraform, and includes [policy controls](https://atmos.tools/core-concepts/components/validation), [vendoring](https://atmos.tools/core-concepts/vendoring/), and [GitOps capabilities](https://atmos.tools/category/github-actions) out of the box. Everything is open source and free.

introduction: |-

  [Atmos](https://atmos.tools) centralizes DevOps and cloud automation into a robust command-line tool, streamlining intricate workflows into straightforward CLI commands. Leveraging advanced hierarchical configurations, it efficiently orchestrates both local and CI/CD pipeline tasks, optimizing infrastructure management for engineers and cloud architects alike. You can then run the CLI anywhere, such as locally or in CI/CD.

  The Atmos project consists of a command-line tool, a `Go` library, and even terraform provider.  It provides numerous [conventions](https://atmos.tools/design-patterns/) to help you provision, manage, and orchestrate workflows across various toolchains. You can 
  even access the configurations natively from within terraform using our [`terraform-provider-utils`](https://github.com/cloudposse/terraform-provider-utils/).

  [Cloud Posse](https://cloudposse.com/) uses this tool extensively for automating cloud infrastructure with [Terraform](https://hashicorp.com/) and [Kubernetes](https://kubernetes.io/), but it can be used to automate any complex workflow.

  ## Common Use-cases

    `atmos` includes workflows for dealing with:

     - Provision large, multi-account[Terraform](https://www.terraform.io/) environments
     - Deploy [helm](https://helm.sh/) [charts](https://helm.sh/docs/topics/charts/) to Kubernetes clusters with [helmfile](https://github.com/roboll/helmfile)
     - Execute [helm](https://helm.sh/) commands on Kubernetes clusters
     - Executing [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) commands on Kubernetes clusters

     Here are some other ways you can extend atmos:
     - Running [AWS CDK](https://aws.amazon.com/cdk/) constructs to define cloud resources
     - Executing commands for the [serverless](https://www.serverless.com/) framework
     - Executing shell commands
     - Combining various commands into workflows to execute many commands sequentially in just one step
     - ... and many more

  In essence, it's a tool that orchestrates the other CLI tools in a consistent and self-explaining manner.

  It's a superset of all other tools (e.g. `make`, `terragrunt`, `terraform`, `aws` cli, `gcloud`, etc.)
  and is intended to be used to tie everything together, so you can provide a simple CLI interface for your developers.

  Moreover, `atmos` is not only a command-line interface for managing clouds and clusters. It provides many useful patterns and best practices, such as:

  - Enforces a project structure convention, so everybody knows where to find things.
  - Provides clear separation of configuration from code, so the same code is easily deployed to different regions, environments and stages)
  - It can be extended to include new features, commands, and workflows
  - The commands have a clean, consistent and easy to understand syntax
  - The CLI code is modular and self-documenting

  ## Documentation

  Find all documentation at: [atmos.tools](https://atmos.tools)

contributors:
  - name: Erik Osterman
    github: osterman
  - name: Andriy Knysh
    github: aknysh
  - name: RB
    github: nitrocode
