atmos_cli_config:
  base_path: ./
  components:
    terraform:
      base_path: ../../components/terraform
      apply_auto_approve: false
      append_user_agent: Atmos/test (Cloud Posse; +https://atmos.tools)
      deploy_run_init: true
      init_run_reconfigure: true
      auto_generate_backend_file: false
      command: ""
      shell:
        prompt: ""
      init:
        pass_vars: false
      plan:
        skip_planfile: false
    helmfile:
      base_path: ""
      use_eks: true
      kubeconfig_path: ""
      helm_aws_profile_pattern: ""
      cluster_name_pattern: ""
      command: ""
    packer:
      base_path: ""
      command: ""
  stacks:
    base_path: stacks
    included_paths:
      - deploy/**/*
    excluded_paths:
      - '**/_defaults.yaml'
    name_pattern: ""
    name_template: '{{ .vars.stage }}'
  workflows:
    base_path: stacks/workflows
    list:
      format: ""
      columns: []
atmos_component: c1
atmos_manifest: deploy/prod
atmos_stack: prod
atmos_stack_file: deploy/prod
backend: {}
backend_type: ""
cli_args:
  - describe
  - component
command: terraform
component: c1
component_info:
  component_path: ../../components/terraform/c1
  component_type: terraform
  terraform_config:
    path: ../../components/terraform/c1
    variables: {}
    outputs: {}
    requiredcore: []
    requiredproviders: {}
    providerconfigs: {}
    managedresources: {}
    dataresources: {}
    modulecalls: {}
    diagnostics:
      - severity: 69
        summary: Failed to read directory
        detail: Directory ../../components/terraform/c1 does not exist or cannot be read.
        pos: null
component_type: terraform
deps:
  - catalog/c1
  - deploy/prod
deps_all:
  - catalog/c1
  - deploy/prod
env: {}
hooks: {}
imports:
  - catalog/c1
  - teams/team1
  - teams/team2
inheritance: []
metadata: {}
overrides:
  vars:
    test:
      a: a-prod
      b: b-prod
      c: c-prod
providers: {}
remote_state_backend: {}
remote_state_backend_type: ""
settings: {}
sources:
  backend: {}
  env: {}
  settings: {}
  vars:
    stage:
      final_value: prod
      name: stage
      stack_dependencies:
        - dependency_type: inline
          stack_file: deploy/prod
          stack_file_section: vars
          variable_value: prod
    test:
      final_value:
        a: a-prod
        b: b-prod
        c: c-prod
        d: d
      name: test
      stack_dependencies:
        - dependency_type: import
          stack_file: catalog/c1
          stack_file_section: components.terraform.vars
          variable_value:
            a: a
            b: b
            c: c
            d: d
stack: prod
tf_cli_vars: {}
vars:
  stage: prod
  test:
    a: a-prod
    b: b-prod
    c: c-prod
    d: d
workspace: prod

