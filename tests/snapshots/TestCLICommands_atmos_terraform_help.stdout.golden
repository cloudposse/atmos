
Notice: Atmos now collects completely anonymous telemetry regarding usage.
This information is used to shape Atmos roadmap and prioritize features.
You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, 
by visiting the following URL: https://atmos.tools/cli/telemetry

Usage:
  atmos terraform [command]

Aliases:
  terraform, tf

Examples:
â€“ Execute a terraform subcommand

```
 $ atmos terraform [subcommand] <component-name> -s <stack-name>
```

Available Commands:
  apply        Apply changes to infrastructure
  clean        Clean up Terraform state and artifacts.
  console      Try Terraform expressions at an interactive command prompt
  deploy       Deploy the specified infrastructure using Terraform
  destroy      Destroy previously-created infrastructure
  fmt          Reformat your configuration in the standard style
  force-unlock Release a stuck lock on the current workspace
  generate     Generate Terraform configuration files for Atmos components and stacks.
  get          Install or upgrade remote Terraform modules
  graph        Generate a Graphviz graph of the steps in an operation
  import       Import existing infrastructure into Terraform state.
  init         Prepare your working directory for other commands
  login        Obtain and save credentials for a remote host
  logout       Remove locally-stored credentials for a remote host
  metadata     Metadata related commands
  modules      Show all declared modules in a working directory
  output       Show output values from your root module
  plan         Show changes required by the current configuration
  plan-diff    Compare two Terraform plans and show the differences
  providers    Show the providers required for this configuration
  refresh      Update the state to match remote systems
  shell        Configure an environment for an Atmos component and start a new shell.
  show         Show the current state or a saved plan
  state        Advanced state management
  taint        Mark a resource instance as not fully functional
  test         Execute integration tests for Terraform modules
  untaint      Remove the 'tainted' state from a resource instance
  validate     Check whether the configuration is valid
  varfile      Load variables from a file
  version      Show the current Terraform version
  workspace    Manage Terraform workspaces
  write        Write variables to a file

Flags:
      --                                                                   Use double dashes to separate Atmos-specific options from native arguments and flags for the command.
      --append-user-agent Atmos/test (Cloud Posse; +https://atmos.tools)   Sets the TF_APPEND_USER_AGENT environment variable to customize the User-Agent string in Terraform provider requests. Example: Atmos/test (Cloud Posse; +https://atmos.tools). This flag works with almost all commands.
      --clone-target-ref                                                   Clone the target reference with which to compare the current branch: atmos terraform <sub-command> --affected --clone-target-ref=true
                                                                           If set to 'false' (default), the target reference will be checked out instead
                                                                           This requires that the target reference is already cloned by Git, and the information about it exists in the '.git' directory
      --components strings                                                 Filter by specific components
      --dry-run                                                            Simulate the command without making any changes
  -h, --help                                                               help for terraform
      --include-dependents                                                 For each affected component, detect the dependent components and process them in the dependency order, recursively: atmos terraform <sub-command> --affected --include-dependents
      --init-pass-vars terraform init                                      Pass the generated varfile to terraform init using the `--var-file` flag. OpenTofu supports passing a varfile to `init` to dynamically configure backends
      --process-functions                                                  Enable/disable YAML functions processing in Atmos stack manifests when executing terraform commands (default true)
      --process-templates                                                  Enable/disable Go template processing in Atmos stack manifests when executing terraform commands (default true)
  -q, --query atmos terraform <command>                                    Execute atmos terraform <command> on the components filtered by a YQ expression, in all stacks or in a specific stack
      --ref string                                                         Git reference with which to compare the current branch: atmos terraform <sub-command> --affected --ref refs/heads/main. Refer to https://git-scm.com/book/en/v2/Git-Internals-Git-References for more details
      --repo-path string                                                   Filesystem path to the already cloned target repository with which to compare the current branch: atmos terraform <sub-command> --affected --repo-path <path_to_already_cloned_repo>
      --sha string                                                         Git commit SHA with which to compare the current branch: atmos terraform <sub-command> --affected --sha 3a5eafeab90426bd82bf5899896b28cc0bab3073
      --skip strings                                                       Skip executing specific YAML functions in the Atmos stack manifests when executing terraform commands
      --skip-init terraform init                                           Skip running terraform init before executing terraform commands
      --ssh-key string                                                     Path to PEM-encoded private key to clone private repos using SSH: atmos terraform <sub-command> --affected --ssh-key <path_to_ssh_key>
      --ssh-key-password string                                            Encryption password for the PEM-encoded private key if the key contains a password-encrypted PEM block: atmos terraform <sub-command> --affected --ssh-key <path_to_ssh_key> --ssh-key-password <password>
  -s, --stack stack                                                        The stack flag specifies the environment or configuration set for deployment in Atmos CLI.

Global Flags:
      --base-path string         Base path for Atmos project
      --config strings           Paths to configuration files (comma-separated or repeated flag)
      --config-path strings      Paths to configuration directories (comma-separated or repeated flag)
      --logs-file string         The file to write Atmos logs to. Logs can be written to any file or any standard file descriptor, including '/dev/stdout', '/dev/stderr' and '/dev/null' (default "/dev/stderr")
      --logs-level string        Logs level. Supported log levels are Trace, Debug, Info, Warning, Off. If the log level is set to Off, Atmos will not log any messages (default "Info")
      --no-color                 Disable color output
      --redirect-stderr stderr   File descriptor to redirect stderr to. Errors can be redirected to any file or any standard file descriptor (including `/dev/null`)

Use "atmos terraform [command] --help" for more information about a command.
