tests:
  - name: "which atmos"
    enabled: true
    description: "Ensure atmos CLI is installed and we're using the one that was built."
    workdir: "../"
    command: "which"
    args:
      - "atmos"
    expect:
      stdout:
        - '(build[/\\]atmos|atmos[/\\]atmos)'
      stderr:
        - "^$"
      exit_code: 0

  - name: "atmos"
    enabled: true
    description: "Verify atmos CLI reports missing stacks directory."
    workdir: "../"
    command: "atmos"
    expect:
      stdout:
        - "atmos.yaml CLI config file specifies the directory for Atmos stacks as stacks,"
        - "but the directory does not exist."
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos --help
    enabled: true
    description: "Ensure atmos CLI help command lists available commands."
    workdir: "../examples/demo-stacks"
    command: "atmos"
    args:
      - "--help"
    expect:
      stdout:
        - "Available Commands:"
        - "\\batlantis\\b"
        - "\\baws\\b"
        - "\\bcompletion\\b"
        - "\\bdescribe\\b"
        - "\\bdocs\\b"
        - "\\bhelmfile\\b"
        - "\\bhelp\\b"
        - "\\blist\\b"
        - "\\bpro\\b"
        - "\\bterraform\\b"
        - "\\bvalidate\\b"
        - "\\bvendor\\b"
        - "\\bversion\\b"
        - "\\bworkflow\\b"
        - "Flags:"
        - "for more information about a command"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos version
    enabled: true
    description: "Check that atmos version command outputs version details."
    workdir: "../examples/demo-stacks"
    command: "atmos"
    args:
      - "version"
    expect:
      stdout:
        - 'ðŸ‘½ Atmos (\d+\.\d+\.\d+|test) on [a-z]+/[a-z0-9]+'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos version --check
    enabled: true
    description: "Verify atmos version --check command functions correctly."
    workdir: "../examples/demo-stacks"
    command: "atmos"
    args:
      - "version"
      - "--check"
    expect:
      stdout:
        - 'ðŸ‘½ Atmos (\d+\.\d+\.\d+|test) on [a-z]+/[a-z0-9]+'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos docs
    enabled: false
    description: "Ensure atmos docs command executes without errors."
    workdir: "../"
    command: "atmos"
    args:
      - "docs"
    expect:
      exit_code: 0
      stderr:
        - "^$"

  - name: atmos docs myapp
    enabled: true
    description: "Validate atmos docs command outputs documentation for a specific component."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "docs"
      - "myapp"
    expect:
      stdout:
        - "Example Terraform Weather Component"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos non-existent
    enabled: true
    description: "Ensure atmos CLI returns an error for a non-existent command."
    workdir: "../"
    command: "atmos"
    args:
      - "non-existent"
    expect:
      stderr:
        - 'unknown command "non-existent" for "atmos"'
      exit_code: 1

  - name: atmos terraform non-existent
    enabled: false
    description: "Ensure atmos CLI returns an error for a non-existent command."
    workdir: "../"
    command: "atmos"
    args:
      - "terraform"
      - "non-existent"
    expect:
      stderr:
        - 'unknown command "non-existent" for "atmos"'
      exit_code: 1
  - name: atmos validate editorconfig
    enabled: true
    description: "Ensure atmos CLI validates success case"
    workdir: "../examples/quick-start-simple/"
    command: "atmos"
    args:
      - "validate"
      - "editorconfig"
    expect:
      stdout:
        - "No errors found"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos validate editorconfig error
    enabled: true
    description: "Ensure atmos CLI gives error during validation based on editorconfig"
    workdir: "../tests/fixtures"
    command: "atmos"
    args:
      - "validate"
      - "editorconfig"
    expect:
      stderr:
        - "18 errors found"
      exit_code: 1

  - name: atmos describe config -f yaml
    enabled: true
    description: "Ensure atmos CLI outputs the Atmos configuration in YAML."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "describe"
      - "config"
      - "-f"
      - "yaml"
    expect:
      stdout:
        - 'append_user_agent: Atmos/(\d+\.\d+\.\d+|test) \(Cloud Posse; \+https:\/\/atmos\.tools\)'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos describe config
    enabled: true
    description: "Ensure atmos CLI outputs the Atmos configuration in JSON."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "describe"
      - "config"
    expect:
      stdout:
        - '"append_user_agent": "Atmos/(\d+\.\d+\.\d+|test) \(Cloud Posse; \+https:\/\/atmos\.tools\)"'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos greet with args
    enabled: true
    description: "Validate atmos custom command greet runs with argument provided."
    workdir: "../examples/demo-custom-command/"
    command: "atmos"
    args:
      - "greet"
      - "Andrey"
    expect:
      stdout:
        - "Hello, Andrey\n"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos greet without args
    enabled: true
    description: "Validate atmos custom command greet runs without argument provided."
    workdir: "../examples/demo-custom-command/"
    command: "atmos"
    args:
      - "greet"
    expect:
      stdout:
        - "Hello, John Doe\n"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos circuit-breaker
    enabled: true
    description: "Ensure atmos breaks the infinite loop when shell depth exceeds maximum (10)."
    workdir: "../tests/fixtures/scenarios/complete/"
    command: "atmos"
    args:
      - "loop"
    expect:
      stderr:
        - "ATMOS_SHLVL.*exceeds maximum allowed depth.*(\r?\n)+exit status 1(\r?\n)+exit status 1.*"
      exit_code: 1
