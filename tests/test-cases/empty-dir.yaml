tests:
  - name: check atmos version in empty-dir
    enabled: true
    snapshot: false
    description: "Check that atmos version command outputs version details."
    workdir: "fixtures/scenarios/empty-dir"
    command: "atmos"
    args:
      - "version"
    expect:
      stdout:
        - 'ðŸ‘½ Atmos (\d+\.\d+\.\d+|test) on [a-z]+/[a-z0-9]+'
      stderr:
        - "^$"
      exit_code: 0

  - name: check atmos in empty-dir
    enabled: true
    snapshot: true
    description: "Check that atmos command outputs helpful information to get started"
    workdir: "fixtures/scenarios/empty-dir"
    command: "atmos"
    args: []
    expect:
      diff: []
      stdout:
        - "atmos.yaml CLI config file was not found."
        - "https://atmos.tools/cli/configuration"
      stderr:
        - "^$"
      exit_code: 1

  - name: check atmos --help in empty-dir
    enabled: true
    # Snapshots are temporarily disabled until PR #957 is merged which cleans workdirs
    # of files which are not part of the git repo
    snapshot: false
    description: "Check that atmos command outputs help even with no configuration"
    workdir: "fixtures/scenarios/empty-dir"
    command: "atmos"
    args: [--help]
    expect:
      diff: []
      exit_code: 0

  - name: atmos warns if not in git repo with no atmos config
    enabled: true
    snapshot: true
    description: "Test that atmos warns if not run inside of a git repo without an atmos config"
    workdir: "/"
    command: "atmos"
    args:
      - list
      - stacks
    env:
      ATMOS_LOGS_LEVEL: Warning
    # Atmos should fail and include the git repo warning
    expect:
      diff: []
      stderr:
        - ".*You're not inside a git repository. Atmos feels lonely outside - bring it home!.*"
      exit_code: 1 # We expect a non-zero exit code because the dir doesnt have an atmos config

  # We need to test from outside a git repo. 
  # We also need to provide a static path to the atmos config that can we used both in CLI and locally.
  # To do so, we can change up 1 directory outside that atmos project and assume the project is named "atmos".
  - name: atmos doesnt warn if not in git repo with atmos config
    enabled: true
    snapshot: true
    description: "Test that atmos doesnt warn if not run inside of a git repo but has an atmos config"
    workdir: "../../"
    command: "atmos"
    args:
      - list
      - stacks
    env:
      ATMOS_LOGS_LEVEL: Warning
      ATMOS_BASE_PATH: "./atmos/tests/fixtures/scenarios/complete"
    expect:
      diff: []
      stdout:
        - !not ".*You're not inside a git repository\\. Atmos feels lonely outside - bring it home!.*"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos doesnt warn if in git repo with atmos config
    enabled: true
    snapshot: true
    description: "Test that atmos doesnt warn if run inside of a git repo with an atmos config"
    workdir: "fixtures/scenarios/complete"
    command: "atmos"
    args:
      - list
      - stacks
    env:
      ATMOS_LOGS_LEVEL: Warning
    # Atmos should pass and not include the git repo warning
    expect:
      diff: []
      stdout:
        - !not ".*You're not inside a git repository\\. Atmos feels lonely outside - bring it home!.*"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos doesnt warn if in git repo with no atmos config
    enabled: true
    snapshot: true
    description: "Test that atmos doesnt warn if run inside of a git repo with no atmos config"
    workdir: "fixtures/scenarios/empty-dir"
    command: "atmos"
    args: []
    env:
      ATMOS_LOGS_LEVEL: Warning
    # Atmos should fail, but not include the git repo warning
    expect:
      diff: []
      stderr:
        - !not ".*You're not inside a git repository\\. Atmos feels lonely outside - bring it home!.*"
      exit_code: 1
