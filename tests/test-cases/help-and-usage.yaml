tests:
  - name: atmos non-existent
    enabled: true
    description: "Ensure atmos CLI returns an error for a non-existent command."
    workdir: "../"
    command: "atmos"
    args:
      - "non-existent"
    expect:
      stderr:
        - 'Error: Unknown command \"non-existent\" for \"atmos\"'
      exit_code: 1
  - name: atmos --help
    enabled: true
    description: "Ensure atmos CLI help command lists available commands."
    workdir: "./"
    command: "atmos"
    args:
      - "--help"
    expect:
      stdout:
        - "Usage:"
        - "Available Commands:"
        - "\\batlantis\\b"
        - "\\baws\\b"
        - "\\bcompletion\\b"
        - "\\bdescribe\\b"
        - "\\bdocs\\b"
        - "\\bhelmfile\\b"
        - "\\bhelp\\b"
        - "\\blist\\b"
        - "\\bpro\\b"
        - "\\bterraform\\b"
        - "\\bvalidate\\b"
        - "\\bvendor\\b"
        - "\\bversion\\b"
        - "\\bworkflow\\b"
        - "SubCommand Aliases:"
        - "\\bhf\\b"
        - "Flags:"
        - "\\batmos \\[subcommand\\] [<]component[>] -s [<]stack[>] -- [<]native-flags[>]"
        - "for more information about a command"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos
    enabled: true
    description: "Ensure atmos CLI help command shows atmos config "
    workdir: "./"
    command: "atmos"
    expect:
      stdout:
        - "atmos.yaml CLI config file was not found"
        - "The default Atmos stacks directory is set to stacks,"
      stderr:
        - "^$"
      exit_code: 1
  - name: atmos terraform
    enabled: true
    description: "Ensure atmos terraform cli shows usage command"
    workdir: "./"
    command: "atmos"
    args:
      - "terraform"
    expect:
      stdout:
        - "Unknown command: \"atmos terraform\""
        - "Valid subcommands are:"
        - "apply"
        - "clean"
        - "console"
      stderr:
        - "Unknown command: \"atmos terraform\""
      exit_code: 1
  - name: atmos terraform help
    enabled: true
    description: "Ensure 'atmos terraform help' shows help output"
    workdir: "./"
    command: "atmos"
    args:
      - "terraform"
      - "help"
    expect:
      stdout:
        - "\\bapply\\b"
        - "\\bgenerate\\b"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos terraform --help
    enabled: true
    description: "Ensure atmos terraform --help shows help output"
    workdir: "./"
    command: "atmos"
    args:
      - "terraform"
      - "--help"
    expect:
      stdout:
        - "\\bapply\\b"
        - "\\bgenerate\\b"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos terraform apply --help
    enabled: true
    description: "Ensure atmos terraform apply --help shows help output"
    workdir: "./"
    command: "atmos"
    args:
      - "terraform"
      - "apply"
      - "--help"
    expect:
      stdout:
        - "\\bUsage\\b"
        - "Flags:"
        - "and the beginning of additional native arguments and flags for the specific command bei"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos terraform apply help
    enabled: true
    description: "Ensure atmos terraform help shows help output"
    workdir: "./"
    command: "atmos"
    args:
      - "terraform"
      - "apply"
      - "--help"
    expect:
      stdout:
        - "\\bUsage\\b"
        - "Flags:"
        - "and the beginning of additional native arguments and flags for the specific command bei"
      stderr:
        - "^$"
      exit_code: 0
  - name: atmos terraform non-existent
    enabled: true
    description: "Ensure atmos terraform CLI returns an error for a non-existent command."
    workdir: "../"
    command: "atmos"
    args:
      - "terraform"
      - "non-existent"
    expect:
      stderr:
        - 'Error: Unknown command \"non-existent\" for \"atmos terraform\"'
      exit_code: 1
  - name: atmos terraform plan non-existent in non workspace
    enabled: true
    description: "Ensure atmos terraform CLI returns an error for a non-existent command in non existing workspace."
    workdir: "../"
    command: "atmos"
    args:
      - "terraform"
      - "plan"
      - "non-existent"
    expect:
      stdout:
        - "CLI config file specifies the directory for Atmos stack"
        - "Quick Start"
      exit_code: 1
  - name: atmos terraform plan non-existent in workspace
    enabled: true
    description: "Ensure atmos terraform CLI returns an error for a non-existent command in existing workspace."
    workdir: "../examples/quick-start-simple"
    command: "atmos"
    args:
      - "terraform"
      - "plan"
      - "non-existent"
    expect:
      stderr:
        - "'stack' is required. Usage: atmos terraform <command> <component> -s <stack>"
      exit_code: 1
