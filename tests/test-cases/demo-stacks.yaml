# yaml-language-server: $schema=https://raw.githubusercontent.com/cloudposse/atmos/refs/heads/main/tests/test-cases/schema.json
tests:
  - name: atmos --help
    enabled: true
    snapshot: true
    description: "Ensure atmos CLI help command lists available commands."
    workdir: "../examples/demo-stacks"
    command: "atmos"
    args:
      - "--help"
    expect:
      timeout: 5s
      diff: []
      stdout:
        - "Available Commands:"
        - "\\batlantis\\b"
        - "\\baws\\b"
        - "\\bcompletion\\b"
        - "\\bdescribe\\b"
        - "\\bdocs\\b"
        - "\\bhelmfile\\b"
        - "\\bhelp\\b"
        - "\\blist\\b"
        - "\\bpro\\b"
        - "\\bterraform\\b"
        - "\\bvalidate\\b"
        - "\\bvendor\\b"
        - "\\bversion\\b"
        - "\\bworkflow\\b"
        - "Flags:"
        - "for more information about a command"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos version
    enabled: true
    snapshot: false
    description: "Check that atmos version command outputs version details."
    workdir: "../examples/demo-stacks"
    command: "atmos"
    args:
      - "version"
    expect:
      timeout: 5s
      stdout:
        - 'ðŸ‘½ Atmos (\d+\.\d+\.\d+|test) on [a-z]+/[a-z0-9]+'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos version --check
    enabled: true
    snapshot: false
    clean: true
    description: "Verify atmos version --check command functions correctly."
    workdir: "../examples/demo-stacks"
    env:
      ATMOS_LOGS_LEVEL: "Warning"
    command: "atmos"
    args:
      - "version"
      - "--check"
    expect:
      timeout: 5s
      stdout:
        - 'ðŸ‘½ Atmos (\d+\.\d+\.\d+|test) on [a-z]+/[a-z0-9]+'
        - 'Atmos Releases: https://github\.com/cloudposse/atmos/releases'
        - 'Install Atmos: https://atmos\.tools/install'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos docs myapp
    enabled: true
    snapshot: true
    description: "Validate atmos docs command outputs documentation for a specific component."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "docs"
      - "myapp"
    expect:
      timeout: 5s
      diff: []
      stdout:
        - "Example Terraform Weather Component"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos describe config -f yaml
    snapshot: true
    enabled: true
    description: "Ensure atmos CLI outputs the Atmos configuration in YAML."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "describe"
      - "config"
      - "-f"
      - "yaml"
    expect:
      timeout: 5s
      diff:
        - "stacksBaseAbsolutePath"
        - "terraformDirAbsolutePath"
        - "helmfileDirAbsolutePath"
        - 'examples[/\\]+demo-stacks[/\\]+stacks[/\\]+\*\*[/\\]+_defaults.yaml'
        - 'examples[/\\]+demo-stacks[/\\]+stacks[/\\]deploy[/\\]+\*\*[/\\]+\*'
      stdout:
        - 'append_user_agent: Atmos/(\d+\.\d+\.\d+|test) \(Cloud Posse; \+https:\/\/atmos\.tools\)'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos describe config
    enabled: true
    snapshot: true
    description: "Ensure atmos CLI outputs the Atmos configuration in JSON."
    workdir: "../examples/demo-stacks/"
    command: "atmos"
    args:
      - "describe"
      - "config"
    expect:
      timeout: 5s
      diff:
        - '"append_user_agent": "Atmos/(\d+\.\d+\.\d+|test) \(Cloud Posse; \+https:\/\/atmos\.tools\)"'
        - "stacksBaseAbsolutePath"
        - "terraformDirAbsolutePath"
        - "helmfileDirAbsolutePath"
        - 'examples[/\\]+demo-stacks[/\\]+stacks[/\\]+\*\*[/\\]+_defaults.yaml'
        - 'examples[/\\]+demo-stacks[/\\]+stacks[/\\]+deploy[/\\]+\*\*[/\\]+\*'
      stdout:
        - '"append_user_agent": "Atmos/(\d+\.\d+\.\d+|test) \(Cloud Posse; \+https:\/\/atmos\.tools\)"'
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos greet with args
    enabled: true
    description: "Validate atmos custom command greet runs with argument provided."
    workdir: "../examples/demo-custom-command/"
    command: "atmos"
    args:
      - "greet"
      - "Andrey"
    expect:
      timeout: 5s
      stdout:
        - "Hello, Andrey\n"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos greet without args
    enabled: true
    description: "Validate atmos custom command greet runs without argument provided."
    workdir: "../examples/demo-custom-command/"
    command: "atmos"
    args:
      - "greet"
    expect:
      timeout: 5s
      stdout:
        - "Hello, John Doe\n"
      stderr:
        - "^$"
      exit_code: 0

  - name: atmos vendor pull downloads components
    enabled: true
    description: "Ensure atmos vendor pull command executes without errors and files are present."
    workdir: "fixtures/scenarios/vendor"
    command: "atmos"
    args:
      - "vendor"
      - "pull"
    expect:
      timeout: 4m
      stdout:
        - "^$"
      stderr:
        - "github/stargazers"
        - "test-components"
        - "weather"
        - "my-vpc1"
        - "vpc-src"
        - "Vendored 5 components"
      file_exists:
        - "./components/terraform/github/stargazers/main/main.tf"
        - "./components/terraform/github/stargazers/main/outputs.tf"
        - "./components/terraform/github/stargazers/main/providers.tf"
        - "./components/terraform/github/stargazers/main/variables.tf"
        - "./components/terraform/github/stargazers/main/versions.tf"
        - "./components/terraform/infra/my-vpc1/main.tf"
        - "./components/terraform/infra/my-vpc1/outputs.tf"
        - "./components/terraform/infra/my-vpc1/providers.tf"
        - "./components/terraform/infra/my-vpc1/variables.tf"
        - "./components/terraform/infra/my-vpc1/versions.tf"
        - "./components/terraform/test-components/main/main.tf"
        - "./components/terraform/test-components/main/outputs.tf"
        - "./components/terraform/test-components/main/providers.tf"
        - "./components/terraform/test-components/main/variables.tf"
        - "./components/terraform/test-components/main/versions.tf"
        - "./components/terraform/weather/main/main.tf"
        - "./components/terraform/weather/main/outputs.tf"
        - "./components/terraform/weather/main/providers.tf"
        - "./components/terraform/weather/main/variables.tf"
        - "./components/terraform/weather/main/versions.tf"
        - "./components/terraform/vpc-src/main.tf"
        - "./components/terraform/vpc-src/outputs.tf"
        - "./components/terraform/vpc-src/variables.tf"
        - "./components/terraform/vpc-src/versions.tf"
      exit_code: 0
