# yaml-language-server: $schema=schema.json

tests:
  - name: "test tty"
    enabled: true
    snapshot: false
    tty: true
    description: "Ensure tty is enabled."
    workdir: "../"
    command: "tty"
    skip:
      # PTY not supported on windows
      os: !not windows
    expect:
      stdout:
        - "^(/dev)"
      stderr:
        - "^$"
      exit_code: 0

  - name: "test non-tty"
    enabled: true
    snapshot: false
    tty: false
    description: "Ensure tty is disabled."
    workdir: "../"
    command: "tty"
    expect:
      stdout:
        - "^not a tty"
      stderr:
        - "^$"
      exit_code: 1

  - name: "which atmos"
    enabled: true
    snapshot: false
    description: "Ensure atmos CLI is installed and we're using the one that was built."
    workdir: "../"
    command: "which"
    args:
      - "atmos"
    expect:
      stdout:
        # build/atmos is local
        # atmos/atmos is in GitHub Actions
        - '(build[/\\]atmos|atmos/atmos)'
      stderr:
        - "^$"
      exit_code: 0

  - name: "atmos"
    enabled: true
    snapshot: true
    description: "Verify atmos CLI reports missing stacks directory."
    workdir: "../"
    command: "atmos"
    expect:
      diff: []
      stdout:
        - "atmos.yaml CLI config file specifies the directory for Atmos stacks as stacks,"
        - "but the directory does not exist."
      stderr:
        - "^$"
      exit_code: 1

  - name: atmos docs
    enabled: true
    snapshot: true
    description: "Ensure atmos docs command executes without errors."
    workdir: "../"
    command: "atmos"
    args:
      - "docs"
    expect:
      diff: []
      exit_code: 0
      stdout:
        - "Opening default browser to 'https://atmos.tools'."
      stderr:
        - "^$"

  - name: atmos docs readme found
    enabled: true
    snapshot: true
    description: "Ensure atmos docs command executes and renders documentation."
    workdir: "fixtures/scenarios/core/"
    command: "atmos"
    args:
      - "docs"
      - "bucket"
    expect:
      diff: []
      exit_code: 0
      stdout:
        - "Example Terraform Weather Component"
      stderr:
        - "^$"

  - name: atmos docs no component 1
    enabled: true
    snapshot: false
    description: "Ensure atmos docs command executes with error component not found due to file descriptor."
    workdir: "fixtures/scenarios/core/"
    command: "atmos"
    args:
      - "--logs-level"
      - "Debug"
      - "docs"
      - "bucket3"
    expect:
      diff: []
      exit_code: 1
      stdout:
        - "DEBU processStoreConfig atmosConfig.StoresConfig=map\\[\\]\n$"
      stderr:
        - "component not found"

  - name: atmos docs no component 2
    enabled: true
    snapshot: false
    description: "Ensure atmos docs command executes with error component not found due to file descriptor."
    workdir: "fixtures/scenarios/core/"
    command: "atmos"
    args:
      - "--logs-level"
      - "Debug"
      - "docs"
      - "bucket6"
    expect:
      diff: []
      exit_code: 1
      stdout:
        - "no such file or directory"
      stderr:
        - "component not found"

  - name: atmos docs no documentation
    enabled: true
    snapshot: true
    description: "Ensure atmos docs command executes with error documentation not found."
    workdir: "fixtures/scenarios/core/"
    command: "atmos"
    args:
      - "docs"
      - "bucket2"
    expect:
      diff: []
      exit_code: 1
      stderr:
        - "documentation is missing for the component bucket2. Consider adding a README.md to provide more context and details"
