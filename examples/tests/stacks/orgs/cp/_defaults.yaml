vars:
  namespace: cp

terraform:
  vars:
    tags:
      # https://atmos.tools/core-concepts/stacks/templating
      # atmos_component: "{{\"{{`{{ .atmos_component }}`}}\"}}"
      atmos_component: "{{`{{ .atmos_component }}`}}"
      atmos_stack: "{{ .atmos_stack }}"
      atmos_manifest: "{{ .atmos_stack_file }}"
      terraform_workspace: "{{ .workspace }}"
      terraform_component: "{{ .component }}"
      # Examples of using the Sprig and Gomplate functions
      # https://masterminds.github.io/sprig/os.html
      provisioned_by_user: '{{ env "USER" }}'
      # https://docs.gomplate.ca/functions/strings
      atmos_component_description: "{{ strings.Title .atmos_component }} component provisioned in the stack {{ .atmos_stack | strings.Quote }}"
      spacelift_stack: "{{ .spacelift_stack }}"
      atlantis_project: "{{ .atlantis_project }}"
      region: "{{ .vars.region }}"
      # provisioned_by_ip: '{{ (datasource "ip").ip }}'

  backend_type: s3 # s3, remote, vault, azurerm, gcs, cloud

  # https://developer.hashicorp.com/terraform/language/settings/backends/configuration
  backend:
    s3:
      encrypt: true
      bucket: "cp-ue2-root-tfstate"
      key: "terraform.tfstate"
      dynamodb_table: "cp-ue2-root-tfstate-lock"
      acl: "bucket-owner-full-control"
      region: "us-east-2"
      role_arn: null
    azurerm:
      subscription_id: 88888-8888-8888-8888-8888888888
      resource_group_name: rg-terraform-state
      storage_account_name: staterraformstate
      container_name: dev-tfstate
      key: dev.atmos
    remote: {}
    vault: {}
    # https://developer.hashicorp.com/terraform/cli/cloud/settings
    cloud:
      organization: "my-org"
      hostname: "app.terraform.io"
      workspaces:
        name: "{terraform_workspace}"

  remote_state_backend:
    s3:
      role_arn: "arn:aws:iam::123456789012:role/cp-gbl-root-terraform"

  providers:
    context:
      enabled: true
      delimiter: "-"
      properties:
        namespace:
          required: true
          min_length: 2
          max_length: 4
        tenant:
          required: true
          min_length: 2
          max_length: 10
        environment:
          required: true
          min_length: 2
          max_length: 6
        stage:
          required: true
          min_length: 2
          max_length: 20
      values:
        namespace: "{{ .vars.namespace }}"
        tenant: "{{ .vars.tenant }}"
        environment: "{{ .vars.environment }}"
        stage: "{{ .vars.stage }}"
        atmos_component: "{{ .atmos_component }}"
        atmos_stack: "{{ .atmos_stack }}"

helmfile:
  vars: {}

components:
  terraform: {}
  helmfile: {}

settings:
  # https://atmos.tools/core-concepts/stacks/templating
  templates:
    settings:
      # https://masterminds.github.io/sprig
      sprig: {}
      # https://docs.gomplate.ca
      gomplate:
        timeout: 20  # 20 seconds timeout to execute the datasources
        # https://docs.gomplate.ca/datasources
        datasources:
          ip:
            url: "https://api.ipify.org?format=json"
            headers:
              accept:
                - "application/json"
  spacelift:
    workspace_enabled: false
    autodeploy: false
  atlantis:
    # Select a config template defined in `atmos.yaml` in the `integrations.atlantis.config_templates` section
    config_template_name: "config-1"

    # Select a project template defined in `atmos.yaml` in the `integrations.atlantis.project_templates` section
    project_template_name: "project-1"

    # Workflow templates
    # https://www.runatlantis.io/docs/custom-workflows.html#custom-init-plan-apply-commands
    # https://www.runatlantis.io/docs/custom-workflows.html#custom-run-command
    workflow_templates:
      workflow-1:
        plan:
          steps:
            - run: terraform init
            # When using workspaces, you need to select the workspace using the $WORKSPACE environment variable
            - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
            # You must output the plan using '-out $PLANFILE' because Atlantis expects plans to be in a specific location
            - run: terraform plan -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json
        apply:
          steps:
            - run: terraform apply $PLANFILE
      workflow-2:
        plan:
          steps:
            - run: terraform init -reconfigure
            - run: terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
            - run: terraform plan -out $PLANFILE -var-file varfiles/$PROJECT_NAME.tfvars.json
        apply:
          steps:
            - run: terraform apply $PLANFILE
