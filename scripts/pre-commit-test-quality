#!/bin/bash
# Pre-commit hook to enforce test quality standards
# Install by:
#   cp scripts/pre-commit-test-quality .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
#
# Or integrate into existing pre-commit:
#   Add this line to .git/hooks/pre-commit:
#   ./scripts/pre-commit-test-quality || exit 1

set -e

echo "🔍 Checking test quality..."

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

has_errors=0
has_warnings=0

# Check for t.Skip() without reason
echo "  • Checking for bare t.Skip() calls..."
bare_skips=$(git diff --cached --name-only | grep '_test.go$' | xargs git diff --cached 2>/dev/null | grep -E '^\+.*t\.Skip\(' | grep -v 'Skipf' || true)
if [ -n "$bare_skips" ]; then
    echo -e "${RED}✗ Error: Found t.Skip() without reason${NC}"
    echo "  Use t.Skipf() with a clear reason instead:"
    echo "$bare_skips"
    echo ""
    echo "  Example:"
    echo '    t.Skipf("Skipping: requires AWS credentials")'
    has_errors=1
fi

# Check for TODO in new test functions
echo "  • Checking for TODO in test functions..."
todo_tests=$(git diff --cached --name-only | grep '_test.go$' | xargs git diff --cached 2>/dev/null | grep -E '^\+.*func Test.*TODO' || true)
if [ -n "$todo_tests" ]; then
    echo -e "${YELLOW}⚠ Warning: Adding test with TODO${NC}"
    echo "  Consider implementing or documenting why it's deferred:"
    echo "$todo_tests"
    has_warnings=1
fi

# Check for test functions with no assert/require calls (basic heuristic)
echo "  • Checking for tests without assertions..."
git diff --cached --name-only 2>/dev/null | grep '_test.go$' | while read file; do
    # Get added test functions
    added_tests=$(git diff --cached "$file" 2>/dev/null | awk '/^\+func Test.*\(t \*testing\.T\)/ {print $0}' || true)

    if [ -n "$added_tests" ]; then
        # For each test function, check if there are assertions in the diff
        while IFS= read -r test_line; do
            test_name=$(echo "$test_line" | sed 's/^\+func \(Test[^(]*\).*/\1/')

            # Look for assertions in the added lines after this test function
            # This is a simplified check - it looks for assert/require in added lines
            assertions=$(git diff --cached "$file" 2>/dev/null | grep -A 50 "^+func $test_name" | grep -E '^\+.*(assert\.|require\.)' || true)

            if [ -z "$assertions" ]; then
                echo -e "${YELLOW}⚠ Warning: Test $test_name in $file may lack assertions${NC}"
                has_warnings=1
            fi
        done <<< "$added_tests"
    fi
done

# Check for comments without periods
echo "  • Checking comment style..."
bad_comments=$(git diff --cached --name-only 2>/dev/null | grep '_test.go$' | xargs git diff --cached 2>/dev/null | grep -E '^\+\s*//' | grep -v -E '\.$|…$|:$|!$|\?$|\*/$' || true)
if [ -n "$bad_comments" ]; then
    echo -e "${YELLOW}⚠ Warning: Comments should end with periods${NC}"
    echo "  Found comments without proper ending punctuation:"
    echo "$bad_comments" | head -5
    if [ $(echo "$bad_comments" | wc -l) -gt 5 ]; then
        echo "  ... and $(expr $(echo "$bad_comments" | wc -l) - 5) more"
    fi
    has_warnings=1
fi

# Summary
echo ""
if [ $has_errors -eq 1 ]; then
    echo -e "${RED}✗ Pre-commit check failed with errors${NC}"
    echo "  Please fix the errors above before committing."
    exit 1
elif [ $has_warnings -eq 1 ]; then
    echo -e "${YELLOW}⚠ Pre-commit check passed with warnings${NC}"
    echo "  Consider addressing the warnings above."
    echo ""
    read -p "Continue with commit? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Commit aborted."
        exit 1
    fi
else
    echo -e "${GREEN}✓ Test quality checks passed${NC}"
fi

exit 0
