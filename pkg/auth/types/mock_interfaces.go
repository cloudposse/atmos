// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go -package=types
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"
	time "time"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockProvider) Authenticate(ctx context.Context) (ICredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx)
	ret0, _ := ret[0].(ICredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockProviderMockRecorder) Authenticate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockProvider)(nil).Authenticate), ctx)
}

// Environment mocks base method.
func (m *MockProvider) Environment() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment.
func (mr *MockProviderMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockProvider)(nil).Environment))
}

// GetFilesDisplayPath mocks base method.
func (m *MockProvider) GetFilesDisplayPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesDisplayPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFilesDisplayPath indicates an expected call of GetFilesDisplayPath.
func (mr *MockProviderMockRecorder) GetFilesDisplayPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesDisplayPath", reflect.TypeOf((*MockProvider)(nil).GetFilesDisplayPath))
}

// Kind mocks base method.
func (m *MockProvider) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockProviderMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockProvider)(nil).Kind))
}

// Logout mocks base method.
func (m *MockProvider) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockProviderMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockProvider)(nil).Logout), ctx)
}

// Paths mocks base method.
func (m *MockProvider) Paths() ([]Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths")
	ret0, _ := ret[0].([]Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paths indicates an expected call of Paths.
func (mr *MockProviderMockRecorder) Paths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockProvider)(nil).Paths))
}

// Name mocks base method.
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// PreAuthenticate mocks base method.
func (m *MockProvider) PreAuthenticate(manager AuthManager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreAuthenticate", manager)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreAuthenticate indicates an expected call of PreAuthenticate.
func (mr *MockProviderMockRecorder) PreAuthenticate(manager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAuthenticate", reflect.TypeOf((*MockProvider)(nil).PreAuthenticate), manager)
}

// Validate mocks base method.
func (m *MockProvider) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockProviderMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockProvider)(nil).Validate))
}

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
	isgomock struct{}
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockIdentity) Authenticate(ctx context.Context, baseCreds ICredentials) (ICredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, baseCreds)
	ret0, _ := ret[0].(ICredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockIdentityMockRecorder) Authenticate(ctx, baseCreds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockIdentity)(nil).Authenticate), ctx, baseCreds)
}

// Environment mocks base method.
func (m *MockIdentity) Environment() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Environment indicates an expected call of Environment.
func (mr *MockIdentityMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockIdentity)(nil).Environment))
}

// GetProviderName mocks base method.
func (m *MockIdentity) GetProviderName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderName indicates an expected call of GetProviderName.
func (mr *MockIdentityMockRecorder) GetProviderName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderName", reflect.TypeOf((*MockIdentity)(nil).GetProviderName))
}

// Kind mocks base method.
func (m *MockIdentity) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockIdentityMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockIdentity)(nil).Kind))
}

// Logout mocks base method.
func (m *MockIdentity) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIdentityMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIdentity)(nil).Logout), ctx)
}

// Paths mocks base method.
func (m *MockIdentity) Paths() ([]Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths")
	ret0, _ := ret[0].([]Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paths indicates an expected call of Paths.
func (mr *MockIdentityMockRecorder) Paths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockIdentity)(nil).Paths))
}

// PostAuthenticate mocks base method.
func (m *MockIdentity) PostAuthenticate(ctx context.Context, params *PostAuthenticateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAuthenticate", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAuthenticate indicates an expected call of PostAuthenticate.
func (mr *MockIdentityMockRecorder) PostAuthenticate(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAuthenticate", reflect.TypeOf((*MockIdentity)(nil).PostAuthenticate), ctx, params)
}

// Validate mocks base method.
func (m *MockIdentity) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIdentityMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIdentity)(nil).Validate))
}

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
	isgomock struct{}
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthManager) Authenticate(ctx context.Context, identityName string) (*WhoamiInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, identityName)
	ret0, _ := ret[0].(*WhoamiInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthManagerMockRecorder) Authenticate(ctx, identityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthManager)(nil).Authenticate), ctx, identityName)
}

// GetChain mocks base method.
func (m *MockAuthManager) GetChain() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChain")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetChain indicates an expected call of GetChain.
func (mr *MockAuthManagerMockRecorder) GetChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChain", reflect.TypeOf((*MockAuthManager)(nil).GetChain))
}

// GetDefaultIdentity mocks base method.
func (m *MockAuthManager) GetDefaultIdentity() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultIdentity")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultIdentity indicates an expected call of GetDefaultIdentity.
func (mr *MockAuthManagerMockRecorder) GetDefaultIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultIdentity", reflect.TypeOf((*MockAuthManager)(nil).GetDefaultIdentity))
}

// GetFilesDisplayPath mocks base method.
func (m *MockAuthManager) GetFilesDisplayPath(providerName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesDisplayPath", providerName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFilesDisplayPath indicates an expected call of GetFilesDisplayPath.
func (mr *MockAuthManagerMockRecorder) GetFilesDisplayPath(providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesDisplayPath", reflect.TypeOf((*MockAuthManager)(nil).GetFilesDisplayPath), providerName)
}

// GetIdentities mocks base method.
func (m *MockAuthManager) GetIdentities() map[string]schema.Identity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentities")
	ret0, _ := ret[0].(map[string]schema.Identity)
	return ret0
}

// GetIdentities indicates an expected call of GetIdentities.
func (mr *MockAuthManagerMockRecorder) GetIdentities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentities", reflect.TypeOf((*MockAuthManager)(nil).GetIdentities))
}

// GetProviderForIdentity mocks base method.
func (m *MockAuthManager) GetProviderForIdentity(identityName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderForIdentity", identityName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProviderForIdentity indicates an expected call of GetProviderForIdentity.
func (mr *MockAuthManagerMockRecorder) GetProviderForIdentity(identityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderForIdentity", reflect.TypeOf((*MockAuthManager)(nil).GetProviderForIdentity), identityName)
}

// GetProviderKindForIdentity mocks base method.
func (m *MockAuthManager) GetProviderKindForIdentity(identityName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderKindForIdentity", identityName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderKindForIdentity indicates an expected call of GetProviderKindForIdentity.
func (mr *MockAuthManagerMockRecorder) GetProviderKindForIdentity(identityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderKindForIdentity", reflect.TypeOf((*MockAuthManager)(nil).GetProviderKindForIdentity), identityName)
}

// GetProviders mocks base method.
func (m *MockAuthManager) GetProviders() map[string]schema.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders")
	ret0, _ := ret[0].(map[string]schema.Provider)
	return ret0
}

// GetProviders indicates an expected call of GetProviders.
func (mr *MockAuthManagerMockRecorder) GetProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockAuthManager)(nil).GetProviders))
}

// GetStackInfo mocks base method.
func (m *MockAuthManager) GetStackInfo() *schema.ConfigAndStacksInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStackInfo")
	ret0, _ := ret[0].(*schema.ConfigAndStacksInfo)
	return ret0
}

// GetStackInfo indicates an expected call of GetStackInfo.
func (mr *MockAuthManagerMockRecorder) GetStackInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackInfo", reflect.TypeOf((*MockAuthManager)(nil).GetStackInfo))
}

// ListIdentities mocks base method.
func (m *MockAuthManager) ListIdentities() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentities")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListIdentities indicates an expected call of ListIdentities.
func (mr *MockAuthManagerMockRecorder) ListIdentities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentities", reflect.TypeOf((*MockAuthManager)(nil).ListIdentities))
}

// ListProviders mocks base method.
func (m *MockAuthManager) ListProviders() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviders")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListProviders indicates an expected call of ListProviders.
func (mr *MockAuthManagerMockRecorder) ListProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviders", reflect.TypeOf((*MockAuthManager)(nil).ListProviders))
}

// Logout mocks base method.
func (m *MockAuthManager) Logout(ctx context.Context, identityName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, identityName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthManagerMockRecorder) Logout(ctx, identityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthManager)(nil).Logout), ctx, identityName)
}

// LogoutAll mocks base method.
func (m *MockAuthManager) LogoutAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAll indicates an expected call of LogoutAll.
func (mr *MockAuthManagerMockRecorder) LogoutAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAll", reflect.TypeOf((*MockAuthManager)(nil).LogoutAll), ctx)
}

// LogoutProvider mocks base method.
func (m *MockAuthManager) LogoutProvider(ctx context.Context, providerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutProvider", ctx, providerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutProvider indicates an expected call of LogoutProvider.
func (mr *MockAuthManagerMockRecorder) LogoutProvider(ctx, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutProvider", reflect.TypeOf((*MockAuthManager)(nil).LogoutProvider), ctx, providerName)
}

// Validate mocks base method.
func (m *MockAuthManager) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAuthManagerMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAuthManager)(nil).Validate))
}

// Whoami mocks base method.
func (m *MockAuthManager) Whoami(ctx context.Context, identityName string) (*WhoamiInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Whoami", ctx, identityName)
	ret0, _ := ret[0].(*WhoamiInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whoami indicates an expected call of Whoami.
func (mr *MockAuthManagerMockRecorder) Whoami(ctx, identityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whoami", reflect.TypeOf((*MockAuthManager)(nil).Whoami), ctx, identityName)
}

// MockCredentialStore is a mock of CredentialStore interface.
type MockCredentialStore struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialStoreMockRecorder
	isgomock struct{}
}

// MockCredentialStoreMockRecorder is the mock recorder for MockCredentialStore.
type MockCredentialStoreMockRecorder struct {
	mock *MockCredentialStore
}

// NewMockCredentialStore creates a new mock instance.
func NewMockCredentialStore(ctrl *gomock.Controller) *MockCredentialStore {
	mock := &MockCredentialStore{ctrl: ctrl}
	mock.recorder = &MockCredentialStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialStore) EXPECT() *MockCredentialStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCredentialStore) Delete(alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCredentialStoreMockRecorder) Delete(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCredentialStore)(nil).Delete), alias)
}

// IsExpired mocks base method.
func (m *MockCredentialStore) IsExpired(alias string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired", alias)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockCredentialStoreMockRecorder) IsExpired(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockCredentialStore)(nil).IsExpired), alias)
}

// List mocks base method.
func (m *MockCredentialStore) List() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCredentialStoreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCredentialStore)(nil).List))
}

// Retrieve mocks base method.
func (m *MockCredentialStore) Retrieve(alias string) (ICredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", alias)
	ret0, _ := ret[0].(ICredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockCredentialStoreMockRecorder) Retrieve(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockCredentialStore)(nil).Retrieve), alias)
}

// Store mocks base method.
func (m *MockCredentialStore) Store(alias string, creds ICredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", alias, creds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCredentialStoreMockRecorder) Store(alias, creds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCredentialStore)(nil).Store), alias, creds)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateAuthConfig mocks base method.
func (m *MockValidator) ValidateAuthConfig(config *schema.AuthConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAuthConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAuthConfig indicates an expected call of ValidateAuthConfig.
func (mr *MockValidatorMockRecorder) ValidateAuthConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAuthConfig", reflect.TypeOf((*MockValidator)(nil).ValidateAuthConfig), config)
}

// ValidateChains mocks base method.
func (m *MockValidator) ValidateChains(identities map[string]*schema.Identity, providers map[string]*schema.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateChains", identities, providers)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateChains indicates an expected call of ValidateChains.
func (mr *MockValidatorMockRecorder) ValidateChains(identities, providers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateChains", reflect.TypeOf((*MockValidator)(nil).ValidateChains), identities, providers)
}

// ValidateIdentity mocks base method.
func (m *MockValidator) ValidateIdentity(name string, identity *schema.Identity, providers map[string]*schema.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateIdentity", name, identity, providers)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateIdentity indicates an expected call of ValidateIdentity.
func (mr *MockValidatorMockRecorder) ValidateIdentity(name, identity, providers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateIdentity", reflect.TypeOf((*MockValidator)(nil).ValidateIdentity), name, identity, providers)
}

// ValidateProvider mocks base method.
func (m *MockValidator) ValidateProvider(name string, provider *schema.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProvider", name, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProvider indicates an expected call of ValidateProvider.
func (mr *MockValidatorMockRecorder) ValidateProvider(name, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProvider", reflect.TypeOf((*MockValidator)(nil).ValidateProvider), name, provider)
}

// MockICredentials is a mock of ICredentials interface.
type MockICredentials struct {
	ctrl     *gomock.Controller
	recorder *MockICredentialsMockRecorder
	isgomock struct{}
}

// MockICredentialsMockRecorder is the mock recorder for MockICredentials.
type MockICredentialsMockRecorder struct {
	mock *MockICredentials
}

// NewMockICredentials creates a new mock instance.
func NewMockICredentials(ctrl *gomock.Controller) *MockICredentials {
	mock := &MockICredentials{ctrl: ctrl}
	mock.recorder = &MockICredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICredentials) EXPECT() *MockICredentialsMockRecorder {
	return m.recorder
}

// BuildWhoamiInfo mocks base method.
func (m *MockICredentials) BuildWhoamiInfo(info *WhoamiInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildWhoamiInfo", info)
}

// BuildWhoamiInfo indicates an expected call of BuildWhoamiInfo.
func (mr *MockICredentialsMockRecorder) BuildWhoamiInfo(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWhoamiInfo", reflect.TypeOf((*MockICredentials)(nil).BuildWhoamiInfo), info)
}

// GetExpiration mocks base method.
func (m *MockICredentials) GetExpiration() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiration")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiration indicates an expected call of GetExpiration.
func (mr *MockICredentialsMockRecorder) GetExpiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiration", reflect.TypeOf((*MockICredentials)(nil).GetExpiration))
}

// IsExpired mocks base method.
func (m *MockICredentials) IsExpired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockICredentialsMockRecorder) IsExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockICredentials)(nil).IsExpired))
}
