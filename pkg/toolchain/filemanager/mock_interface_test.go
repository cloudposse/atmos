// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface_test.go -package=filemanager
//

// Package filemanager is a generated GoMock package.
package filemanager

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
	isgomock struct{}
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// AddTool mocks base method.
func (m *MockFileManager) AddTool(ctx context.Context, tool, version string, opts ...AddOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tool, version}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTool", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTool indicates an expected call of AddTool.
func (mr *MockFileManagerMockRecorder) AddTool(ctx, tool, version any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tool, version}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTool", reflect.TypeOf((*MockFileManager)(nil).AddTool), varargs...)
}

// Enabled mocks base method.
func (m *MockFileManager) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockFileManagerMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockFileManager)(nil).Enabled))
}

// GetTools mocks base method.
func (m *MockFileManager) GetTools(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTools", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTools indicates an expected call of GetTools.
func (mr *MockFileManagerMockRecorder) GetTools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTools", reflect.TypeOf((*MockFileManager)(nil).GetTools), ctx)
}

// Name mocks base method.
func (m *MockFileManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFileManager)(nil).Name))
}

// RemoveTool mocks base method.
func (m *MockFileManager) RemoveTool(ctx context.Context, tool, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTool", ctx, tool, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTool indicates an expected call of RemoveTool.
func (mr *MockFileManagerMockRecorder) RemoveTool(ctx, tool, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTool", reflect.TypeOf((*MockFileManager)(nil).RemoveTool), ctx, tool, version)
}

// SetDefault mocks base method.
func (m *MockFileManager) SetDefault(ctx context.Context, tool, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefault", ctx, tool, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockFileManagerMockRecorder) SetDefault(ctx, tool, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockFileManager)(nil).SetDefault), ctx, tool, version)
}

// Verify mocks base method.
func (m *MockFileManager) Verify(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockFileManagerMockRecorder) Verify(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockFileManager)(nil).Verify), ctx)
}
