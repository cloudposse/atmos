// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=filematch
//

// Package filematch is a generated GoMock package.
package filematch

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockglobCompiler is a mock of globCompiler interface.
type MockglobCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockglobCompilerMockRecorder
	isgomock struct{}
}

// MockglobCompilerMockRecorder is the mock recorder for MockglobCompiler.
type MockglobCompilerMockRecorder struct {
	mock *MockglobCompiler
}

// NewMockglobCompiler creates a new mock instance.
func NewMockglobCompiler(ctrl *gomock.Controller) *MockglobCompiler {
	mock := &MockglobCompiler{ctrl: ctrl}
	mock.recorder = &MockglobCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockglobCompiler) EXPECT() *MockglobCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method.
func (m *MockglobCompiler) Compile(pattern string) (compiledGlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", pattern)
	ret0, _ := ret[0].(compiledGlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile.
func (mr *MockglobCompilerMockRecorder) Compile(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockglobCompiler)(nil).Compile), pattern)
}

// MockcompiledGlob is a mock of compiledGlob interface.
type MockcompiledGlob struct {
	ctrl     *gomock.Controller
	recorder *MockcompiledGlobMockRecorder
	isgomock struct{}
}

// MockcompiledGlobMockRecorder is the mock recorder for MockcompiledGlob.
type MockcompiledGlobMockRecorder struct {
	mock *MockcompiledGlob
}

// NewMockcompiledGlob creates a new mock instance.
func NewMockcompiledGlob(ctrl *gomock.Controller) *MockcompiledGlob {
	mock := &MockcompiledGlob{ctrl: ctrl}
	mock.recorder = &MockcompiledGlobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompiledGlob) EXPECT() *MockcompiledGlobMockRecorder {
	return m.recorder
}

// Match mocks base method.
func (m *MockcompiledGlob) Match(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockcompiledGlobMockRecorder) Match(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockcompiledGlob)(nil).Match), arg0)
}

// MockFileMatcher is a mock of FileMatcher interface.
type MockFileMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileMatcherMockRecorder
	isgomock struct{}
}

// MockFileMatcherMockRecorder is the mock recorder for MockFileMatcher.
type MockFileMatcherMockRecorder struct {
	mock *MockFileMatcher
}

// NewMockFileMatcher creates a new mock instance.
func NewMockFileMatcher(ctrl *gomock.Controller) *MockFileMatcher {
	mock := &MockFileMatcher{ctrl: ctrl}
	mock.recorder = &MockFileMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMatcher) EXPECT() *MockFileMatcherMockRecorder {
	return m.recorder
}

// MatchFiles mocks base method.
func (m *MockFileMatcher) MatchFiles(arg0 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchFiles", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchFiles indicates an expected call of MatchFiles.
func (mr *MockFileMatcherMockRecorder) MatchFiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchFiles", reflect.TypeOf((*MockFileMatcher)(nil).MatchFiles), arg0)
}
