// Code generated by MockGen. DO NOT EDIT.
// Source: schema_validator.go

// Package validator is a generated GoMock package.
package validator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gojsonschema "github.com/xeipuuv/gojsonschema"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateYAMLSchema mocks base method.
func (m *MockValidator) ValidateYAMLSchema(schema, sourceFile, sourceKey string) ([]gojsonschema.ResultError, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateYAMLSchema", schema, sourceFile, sourceKey)
	ret0, _ := ret[0].([]gojsonschema.ResultError)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateYAMLSchema indicates an expected call of ValidateYAMLSchema.
func (mr *MockValidatorMockRecorder) ValidateYAMLSchema(schema, sourceFile, sourceKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateYAMLSchema", reflect.TypeOf((*MockValidator)(nil).ValidateYAMLSchema), schema, sourceFile, sourceKey)
}
