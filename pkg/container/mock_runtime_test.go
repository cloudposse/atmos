// Code generated by MockGen. DO NOT EDIT.
// Source: runtime.go
//
// Generated by this command:
//
//	mockgen -source=runtime.go -destination=mock_runtime_test.go -package=container
//

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
	isgomock struct{}
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockRuntime) Attach(ctx context.Context, containerID string, opts *AttachOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", ctx, containerID, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockRuntimeMockRecorder) Attach(ctx, containerID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockRuntime)(nil).Attach), ctx, containerID, opts)
}

// Build mocks base method.
func (m *MockRuntime) Build(ctx context.Context, config *BuildConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockRuntimeMockRecorder) Build(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockRuntime)(nil).Build), ctx, config)
}

// Create mocks base method.
func (m *MockRuntime) Create(ctx context.Context, config *CreateConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRuntimeMockRecorder) Create(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuntime)(nil).Create), ctx, config)
}

// Exec mocks base method.
func (m *MockRuntime) Exec(ctx context.Context, containerID string, cmd []string, opts *ExecOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, containerID, cmd, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockRuntimeMockRecorder) Exec(ctx, containerID, cmd, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRuntime)(nil).Exec), ctx, containerID, cmd, opts)
}

// Info mocks base method.
func (m *MockRuntime) Info(ctx context.Context) (*RuntimeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(*RuntimeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockRuntimeMockRecorder) Info(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockRuntime)(nil).Info), ctx)
}

// Inspect mocks base method.
func (m *MockRuntime) Inspect(ctx context.Context, containerID string) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, containerID)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockRuntimeMockRecorder) Inspect(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockRuntime)(nil).Inspect), ctx, containerID)
}

// List mocks base method.
func (m *MockRuntime) List(ctx context.Context, filters map[string]string) ([]Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filters)
	ret0, _ := ret[0].([]Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRuntimeMockRecorder) List(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRuntime)(nil).List), ctx, filters)
}

// Logs mocks base method.
func (m *MockRuntime) Logs(ctx context.Context, containerID string, follow bool, tail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, containerID, follow, tail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockRuntimeMockRecorder) Logs(ctx, containerID, follow, tail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockRuntime)(nil).Logs), ctx, containerID, follow, tail)
}

// Pull mocks base method.
func (m *MockRuntime) Pull(ctx context.Context, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockRuntimeMockRecorder) Pull(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockRuntime)(nil).Pull), ctx, image)
}

// Remove mocks base method.
func (m *MockRuntime) Remove(ctx context.Context, containerID string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, containerID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRuntimeMockRecorder) Remove(ctx, containerID, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRuntime)(nil).Remove), ctx, containerID, force)
}

// Start mocks base method.
func (m *MockRuntime) Start(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRuntimeMockRecorder) Start(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRuntime)(nil).Start), ctx, containerID)
}

// Stop mocks base method.
func (m *MockRuntime) Stop(ctx context.Context, containerID string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, containerID, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRuntimeMockRecorder) Stop(ctx, containerID, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRuntime)(nil).Stop), ctx, containerID, timeout)
}
