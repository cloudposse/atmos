// Code generated by MockGen. DO NOT EDIT.
// Source: file_downloader_interface.go
//
// Generated by this command:
//
//	mockgen -source=file_downloader_interface.go -destination=mock_file_downloader_interface.go -package=downloader
//

// Package downloader is a generated GoMock package.
package downloader

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFileDownloader is a mock of FileDownloader interface.
type MockFileDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockFileDownloaderMockRecorder
	isgomock struct{}
}

// MockFileDownloaderMockRecorder is the mock recorder for MockFileDownloader.
type MockFileDownloaderMockRecorder struct {
	mock *MockFileDownloader
}

// NewMockFileDownloader creates a new mock instance.
func NewMockFileDownloader(ctrl *gomock.Controller) *MockFileDownloader {
	mock := &MockFileDownloader{ctrl: ctrl}
	mock.recorder = &MockFileDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDownloader) EXPECT() *MockFileDownloaderMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFileDownloader) Fetch(src, dest string, mode ClientMode, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", src, dest, mode, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFileDownloaderMockRecorder) Fetch(src, dest, mode, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFileDownloader)(nil).Fetch), src, dest, mode, timeout)
}

// FetchAndAutoParse mocks base method.
func (m *MockFileDownloader) FetchAndAutoParse(src string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndAutoParse", src)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndAutoParse indicates an expected call of FetchAndAutoParse.
func (mr *MockFileDownloaderMockRecorder) FetchAndAutoParse(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndAutoParse", reflect.TypeOf((*MockFileDownloader)(nil).FetchAndAutoParse), src)
}

// FetchAndParseByExtension mocks base method.
func (m *MockFileDownloader) FetchAndParseByExtension(src string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndParseByExtension", src)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndParseByExtension indicates an expected call of FetchAndParseByExtension.
func (mr *MockFileDownloaderMockRecorder) FetchAndParseByExtension(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndParseByExtension", reflect.TypeOf((*MockFileDownloader)(nil).FetchAndParseByExtension), src)
}

// FetchAndParseRaw mocks base method.
func (m *MockFileDownloader) FetchAndParseRaw(src string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndParseRaw", src)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndParseRaw indicates an expected call of FetchAndParseRaw.
func (mr *MockFileDownloaderMockRecorder) FetchAndParseRaw(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndParseRaw", reflect.TypeOf((*MockFileDownloader)(nil).FetchAndParseRaw), src)
}

// FetchData mocks base method.
func (m *MockFileDownloader) FetchData(src string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchData", src)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchData indicates an expected call of FetchData.
func (mr *MockFileDownloaderMockRecorder) FetchData(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchData", reflect.TypeOf((*MockFileDownloader)(nil).FetchData), src)
}

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
	isgomock struct{}
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockClientFactory) NewClient(ctx context.Context, src, dest string, mode ClientMode) (DownloadClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, src, dest, mode)
	ret0, _ := ret[0].(DownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClientFactoryMockRecorder) NewClient(ctx, src, dest, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClientFactory)(nil).NewClient), ctx, src, dest, mode)
}

// MockDownloadClient is a mock of DownloadClient interface.
type MockDownloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadClientMockRecorder
	isgomock struct{}
}

// MockDownloadClientMockRecorder is the mock recorder for MockDownloadClient.
type MockDownloadClientMockRecorder struct {
	mock *MockDownloadClient
}

// NewMockDownloadClient creates a new mock instance.
func NewMockDownloadClient(ctrl *gomock.Controller) *MockDownloadClient {
	mock := &MockDownloadClient{ctrl: ctrl}
	mock.recorder = &MockDownloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadClient) EXPECT() *MockDownloadClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDownloadClient) Get() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDownloadClientMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDownloadClient)(nil).Get))
}
