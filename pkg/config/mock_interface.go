// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	schema "github.com/cloudposse/atmos/pkg/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// InitCliConfig mocks base method.
func (m *MockLoader) InitCliConfig(configAndStacksInfo *schema.ConfigAndStacksInfo, processStacks bool) (schema.AtmosConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCliConfig", configAndStacksInfo, processStacks)
	ret0, _ := ret[0].(schema.AtmosConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitCliConfig indicates an expected call of InitCliConfig.
func (mr *MockLoaderMockRecorder) InitCliConfig(configAndStacksInfo, processStacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCliConfig", reflect.TypeOf((*MockLoader)(nil).InitCliConfig), configAndStacksInfo, processStacks)
}
