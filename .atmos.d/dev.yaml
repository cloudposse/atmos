name: dev
description: Development workflow commands for Atmos development
commands:
  - name: setup
    description: Set up local development environment
    steps:
      - |
        echo "🚀 Setting up Atmos development environment..."

        echo "1️⃣  Installing Go dependencies..."
        go mod download

        echo "2️⃣  Installing pre-commit and golangci-lint..."
        if ! command -v pre-commit >/dev/null 2>&1; then
          if command -v brew >/dev/null 2>&1; then
            echo "Installing pre-commit via Homebrew..."
            brew install pre-commit
          elif command -v apt-get >/dev/null 2>&1; then
            echo "Installing pre-commit via apt..."
            sudo apt-get update && sudo apt-get install -y pre-commit
          else
            echo "Installing pre-commit via pip..."
            pip install --user pre-commit || pip install pre-commit
          fi
        else
          echo "pre-commit is already installed: $(pre-commit --version)"
        fi

        if ! command -v golangci-lint >/dev/null 2>&1; then
          if command -v brew >/dev/null 2>&1; then
            echo "Installing golangci-lint via Homebrew..."
            brew install golangci-lint
          else
            echo "Installing golangci-lint via curl..."
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
          fi
        else
          echo "golangci-lint is already installed: $(golangci-lint --version)"
        fi

        echo "3️⃣  Installing pre-commit hooks..."
        pre-commit install

        echo "4️⃣  Installing Go tools..."
        go install mvdan.cc/gofumpt@latest

        echo "✅ Development environment setup complete!"
        echo ""
        echo "Run 'atmos dev check' to check staged files (read-only)"
        echo "Run 'atmos dev check-pr' to check PR changes (read-only)"
        echo "Run 'atmos dev format' to auto-format staged files"
        echo "Run 'atmos dev format-pr' to auto-format PR changes"

  - name: check
    description: Check staged files for issues (read-only, no modifications)
    steps:
      - |
        echo "🔍 Checking staged files (read-only)..."
        # Run checks without modifying files
        STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM -- '*.go' | grep -v -E '^(vendor/|tests/test-cases/|tests/testdata/|tests/snapshots/)' || true)
        if [ -n "$STAGED_GO_FILES" ]; then
          echo "Checking Go formatting..."
          echo "$STAGED_GO_FILES" | xargs -I {} gofumpt -d {} 2>/dev/null | head -20 || true
          echo "Running golangci-lint..."
          golangci-lint run --new-from-rev=origin/main --config=.golangci.yml $STAGED_GO_FILES || true
        fi
        echo "💡 To auto-fix issues, run: atmos dev format"

  - name: check-pr
    description: Check PR changes for issues (read-only, no modifications)
    steps:
      - |
        echo "🔍 Checking PR changes (read-only)..."
        BASE_REF="${GITHUB_BASE_REF:-main}"
        # Get changed Go files
        CHANGED_GO_FILES=$(git diff origin/$BASE_REF...HEAD --name-only -- '*.go' | grep -v -E '^(vendor/|tests/test-cases/|tests/testdata/|tests/snapshots/)' || true)
        if [ -n "$CHANGED_GO_FILES" ]; then
          echo "Checking Go formatting..."
          echo "$CHANGED_GO_FILES" | xargs -I {} gofumpt -d {} 2>/dev/null | head -20 || true
          echo "Running golangci-lint..."
          golangci-lint run --new-from-rev=origin/$BASE_REF --config=.golangci.yml || true
        fi
        echo "💡 To auto-fix issues, run: atmos dev format-pr"

  - name: check-all
    description: Check all files for issues (read-only, no modifications)
    steps:
      - |
        echo "🔍 Checking all files (read-only)..."
        echo "⚠️  This may take a while..."
        # Check formatting without modifying
        echo "Checking Go formatting..."
        find . -name '*.go' -not -path './vendor/*' -not -path './tests/test-cases/*' -not -path './tests/testdata/*' -not -path './tests/snapshots/*' | xargs gofumpt -d 2>/dev/null | head -50 || true
        echo "Running comprehensive linting..."
        golangci-lint run --config=.golangci.yml || true
        echo "💡 To auto-fix issues, run: atmos dev format-all (⚠️  DANGEROUS)"

  - name: format
    description: Auto-format staged files
    steps:
      - |
        echo "🔧 Auto-formatting staged files..."
        pre-commit run || true
        echo "✅ Formatting applied to staged files"

  - name: format-pr
    description: Auto-format PR changes
    steps:
      - |
        echo "🔧 Auto-formatting PR changes..."
        BASE_REF="${GITHUB_BASE_REF:-main}"
        pre-commit run --from-ref origin/$BASE_REF --to-ref HEAD || true
        echo "✅ Formatting applied to PR changes"

  - name: format-all
    description: ⚠️  DANGEROUS - Auto-format ALL files (excludes golden snapshots)
    steps:
      - |
        echo "⚠️  WARNING: This will modify many files!"
        echo "   Excludes: vendor/, tests/test-cases/, tests/testdata/, tests/snapshots/"
        echo "   Golden snapshots and fixtures are protected."
        echo ""
        echo "   Press Ctrl+C to cancel, or wait 5 seconds to continue..."
        sleep 5
        echo "🔧 Auto-formatting all files..."
        # Run pre-commit on all files with our exclude patterns
        pre-commit run --all-files || true
        echo "✅ Formatting complete. Review changes with: git diff"

  - name: lint
    description: Run golangci-lint
    steps:
      - golangci-lint run --config=.golangci.yml

  - name: test
    description: Run tests
    steps:
      - go test ./... -v

  - name: validate
    description: Validate code by running build, lint, and tests
    steps:
      - |
        echo "🔨 Building..."
        go build ./... || { echo "❌ Build failed"; exit 1; }

        echo "🔍 Linting..."
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run --config=.golangci.yml || { echo "⚠️ Linting issues found"; }
        else
          echo "⚠️ golangci-lint not found, falling back to go vet..."
          go vet ./... || { echo "⚠️ go vet found issues"; }
        fi

        echo "🧪 Testing..."
        go test ./... -v || { echo "❌ Tests failed"; exit 1; }

        echo "✅ Validation complete!"

  - name: build
    description: Build the Atmos binary
    steps:
      - make build

  - name: quick
    description: Quick build and test
    steps:
      - |
        echo "🏃 Running quick build and test..."
        make build
        ./build/atmos version
        echo "✅ Quick build successful!"

  - name: update-hooks
    description: Update pre-commit hooks to latest versions
    steps:
      - pre-commit autoupdate
