commands:
  - name: dev
    description: Development workflow commands for Atmos development
    # Subcommands under 'atmos dev'
    commands:
      - name: setup
        description: Set up local development environment
        steps:
          - |
            echo "üöÄ Setting up Atmos development environment..."

            echo "1Ô∏è‚É£  Installing Go dependencies..."
            go mod download

            echo "2Ô∏è‚É£  Installing pre-commit and golangci-lint..."
            if ! command -v pre-commit >/dev/null 2>&1; then
              if command -v brew >/dev/null 2>&1; then
                echo "Installing pre-commit via Homebrew..."
                brew install pre-commit
              elif command -v apt-get >/dev/null 2>&1; then
                echo "Installing pre-commit via apt..."
                sudo apt-get update && sudo apt-get install -y pre-commit
              else
                echo "Installing pre-commit via pip..."
                pip install --user pre-commit || pip install pre-commit
              fi
            else
              echo "pre-commit is already installed: $(pre-commit --version)"
            fi

            if ! command -v golangci-lint >/dev/null 2>&1; then
              if command -v brew >/dev/null 2>&1; then
                echo "Installing golangci-lint via Homebrew..."
                brew install golangci-lint
              else
                echo "Installing golangci-lint via curl..."
                curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
              fi
            else
              echo "golangci-lint is already installed: $(golangci-lint --version)"
            fi

            echo "3Ô∏è‚É£  Installing pre-commit hooks..."
            pre-commit install

            echo "4Ô∏è‚É£  Installing Go tools..."
            go install mvdan.cc/gofumpt@latest

            echo "‚úÖ Development environment setup complete!"
            echo ""
            echo "Run 'atmos dev check' to check staged files (read-only)"
            echo "Run 'atmos dev check-pr' to check PR changes (read-only)"
            echo "Run 'atmos dev format' to auto-format staged files"
            echo "Run 'atmos dev format-pr' to auto-format PR changes"

      - name: check
        description: Check staged files for issues (read-only, no modifications)
        steps:
          - |
            echo "üîç Checking staged files (read-only)..."
            # Run checks without modifying files
            STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM -- '*.go' | grep -v -E '^(vendor/|tests/test-cases/|tests/testdata/|tests/snapshots/)' || true)
            ISSUES_FOUND=false
            if [ -n "$STAGED_GO_FILES" ]; then
              echo "Checking Go formatting..."
              FORMAT_ISSUES=$(echo "$STAGED_GO_FILES" | xargs -I {} gofumpt -d {} 2>/dev/null | head -20)
              if [ -n "$FORMAT_ISSUES" ]; then
                echo "$FORMAT_ISSUES"
                ISSUES_FOUND=true
              fi
              echo "Running golangci-lint..."
              if ! golangci-lint run --new-from-rev=origin/main --config=.golangci.yml $STAGED_GO_FILES; then
                ISSUES_FOUND=true
              fi
            fi
            if [ "$ISSUES_FOUND" = true ]; then
              echo "üí° To auto-fix issues, run: atmos dev format"
            else
              echo "‚úÖ No issues found in staged files"
            fi

      - name: check-pr
        description: Run pre-commit hooks against PR modified files
        steps:
          - |
            echo "üîç Running pre-commit checks on PR files..."

            # Determine the base branch
            BASE_REF="${GITHUB_BASE_REF:-origin/main}"

            # Check if we have the base ref
            if ! git rev-parse --verify "$BASE_REF" > /dev/null 2>&1; then
              # Try without origin/ prefix
              BASE_REF="${BASE_REF#origin/}"
              if ! git rev-parse --verify "$BASE_REF" > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Base ref '$BASE_REF' not found. Fetching from origin..."
                git fetch origin main:main || true
                BASE_REF="main"
              fi
            fi

            echo "üìä Checking files changed from $BASE_REF..."

            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only "$BASE_REF"...HEAD 2>/dev/null || git diff --name-only origin/main...HEAD)

            if [ -z "$CHANGED_FILES" ]; then
              echo "‚úÖ No files changed in PR"
              exit 0
            fi

            echo "Found $(echo "$CHANGED_FILES" | wc -l | xargs) changed files"
            echo ""

            # Run pre-commit on changed files only
            echo "Running pre-commit hooks..."
            if pre-commit run --from-ref "$BASE_REF" --to-ref HEAD; then
              echo ""
              echo "‚úÖ All pre-commit checks passed!"
            else
              EXIT_CODE=$?
              echo ""
              echo "‚ùå Some pre-commit checks failed (exit code: $EXIT_CODE)"
              echo ""
              echo "üí° To auto-fix issues, run: atmos dev format-pr"
              exit $EXIT_CODE
            fi

      - name: check-all
        description: Check all files for issues (read-only, no modifications)
        steps:
          - |
            echo "üîç Checking all files (read-only)..."
            echo "‚ö†Ô∏è  This may take a while..."
            ISSUES_FOUND=false
            # Check formatting without modifying
            echo "Checking Go formatting..."
            FORMAT_ISSUES=$(find . -name '*.go' -not -path './vendor/*' -not -path './tests/test-cases/*' -not -path './tests/testdata/*' -not -path './tests/snapshots/*' | xargs gofumpt -d 2>/dev/null | head -50)
            if [ -n "$FORMAT_ISSUES" ]; then
              echo "$FORMAT_ISSUES"
              ISSUES_FOUND=true
            fi
            echo "Running comprehensive linting..."
            if ! golangci-lint run --config=.golangci.yml; then
              ISSUES_FOUND=true
            fi
            if [ "$ISSUES_FOUND" = true ]; then
              echo "üí° To auto-fix issues, run: atmos dev format-all (‚ö†Ô∏è  DANGEROUS)"
            else
              echo "‚úÖ No issues found in the codebase"
            fi

      - name: format
        description: Auto-format staged files
        steps:
          - |
            echo "üîß Auto-formatting staged files..."
            pre-commit run || true
            echo "‚úÖ Formatting applied to staged files"

      - name: format-pr
        description: Auto-format PR changes
        steps:
          - |
            echo "üîß Auto-formatting PR changes..."
            BASE_REF="${GITHUB_BASE_REF:-main}"
            pre-commit run --from-ref origin/$BASE_REF --to-ref HEAD || true
            echo "‚úÖ Formatting applied to PR changes"

      - name: format-all
        description: ‚ö†Ô∏è  DANGEROUS - Auto-format ALL files (excludes golden snapshots)
        steps:
          - |
            echo "‚ö†Ô∏è  WARNING: This will modify many files!"
            echo "   Excludes: vendor/, tests/test-cases/, tests/testdata/, tests/snapshots/"
            echo "   Golden snapshots and fixtures are protected."
            echo ""
            echo "   Press Ctrl+C to cancel, or wait 5 seconds to continue..."
            sleep 5
            echo "üîß Auto-formatting all files..."
            # Run pre-commit on all files with our exclude patterns
            pre-commit run --all-files || true
            echo "‚úÖ Formatting complete. Review changes with: git diff"

      - name: lint
        description: Run golangci-lint
        steps:
          - golangci-lint run --config=.golangci.yml

      - name: test
        description: Run tests
        steps:
          - go test ./... -v

      - name: validate
        description: Validate code by running build, lint, and tests
        steps:
          - |
            echo "üî® Building..."
            go build ./... || { echo "‚ùå Build failed"; exit 1; }

            echo "üîç Linting..."
            if command -v golangci-lint >/dev/null 2>&1; then
              golangci-lint run --config=.golangci.yml || { echo "‚ùå Linting failed"; exit 1; }
            else
              echo "‚ö†Ô∏è golangci-lint not found, falling back to go vet..."
              go vet ./... || { echo "‚ùå go vet failed"; exit 1; }
            fi

            echo "üß™ Testing..."
            go test ./... -v || { echo "‚ùå Tests failed"; exit 1; }

            echo "‚úÖ Validation complete!"

      - name: build
        description: Build the Atmos binary
        steps:
          - make build

      - name: cache-list
        description: List GitHub Actions cache entries over 1GB
        steps:
          - |
            echo "üîç Checking GitHub Actions cache for entries over 1GB..."

            # Check if gh CLI is installed
            if ! command -v gh &> /dev/null; then
              echo "‚ùå GitHub CLI (gh) is not installed. Please install it first."
              echo "   Visit: https://cli.github.com/"
              exit 1
            fi

            # Check if authenticated
            if ! gh auth status &> /dev/null; then
              echo "‚ùå Not authenticated with GitHub. Please run: gh auth login"
              exit 1
            fi

            # Get cache entries over 1GB
            CACHE_ENTRIES=$(gh actions-cache list -R cloudposse/atmos | grep GB)

            if [ -z "$CACHE_ENTRIES" ]; then
              echo "‚úÖ No cache entries over 1GB found."
              exit 0
            fi

            echo "Found cache entries over 1GB:"
            echo ""
            echo "$CACHE_ENTRIES" | column -t -s$'\t'
            echo ""

            # Calculate total size
            TOTAL_SIZE=$(echo "$CACHE_ENTRIES" | awk '{print $2}' | grep -o '[0-9.]*' | awk '{s+=$1} END {printf "%.2f", s}')
            ENTRY_COUNT=$(echo "$CACHE_ENTRIES" | wc -l | xargs)

            echo "üìä Summary:"
            echo "   Total entries: $ENTRY_COUNT"
            echo "   Total size: ${TOTAL_SIZE} GB"
            echo ""
            echo "üí° To delete these caches, run: atmos dev cache-clear"

      - name: cache-clear
        description: Clear GitHub Actions cache entries over 1GB
        steps:
          - |
            echo "üîç Checking GitHub Actions cache for entries over 1GB..."

            # Check if gh CLI is installed
            if ! command -v gh &> /dev/null; then
              echo "‚ùå GitHub CLI (gh) is not installed. Please install it first."
              echo "   Visit: https://cli.github.com/"
              exit 1
            fi

            # Check if authenticated
            if ! gh auth status &> /dev/null; then
              echo "‚ùå Not authenticated with GitHub. Please run: gh auth login"
              exit 1
            fi

            # Get cache entries over 1GB
            CACHE_ENTRIES=$(gh actions-cache list -R cloudposse/atmos | grep GB)

            if [ -z "$CACHE_ENTRIES" ]; then
              echo "‚úÖ No cache entries over 1GB found."
              exit 0
            fi

            echo "Found cache entries over 1GB:"
            echo "$CACHE_ENTRIES"
            echo ""

            # Count entries
            ENTRY_COUNT=$(echo "$CACHE_ENTRIES" | wc -l | xargs)
            echo "üìä Total entries to delete: $ENTRY_COUNT"
            echo ""

            # Ask for confirmation
            read -p "‚ö†Ô∏è  Do you want to delete these cache entries? (y/N): " -n 1 -r
            echo ""

            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
              echo "‚ùå Cancelled."
              exit 0
            fi

            echo "üóëÔ∏è  Deleting cache entries..."

            # Extract cache keys and delete them
            echo "$CACHE_ENTRIES" | while IFS=$'\t' read -r key rest; do
              # Extract just the cache key (first field)
              cache_key=$(echo "$key" | awk '{print $1}')

              if [ -n "$cache_key" ]; then
                echo "  Deleting: $cache_key"
                if gh actions-cache delete "$cache_key" -R cloudposse/atmos --confirm; then
                  echo "  ‚úÖ Deleted: $cache_key"
                else
                  echo "  ‚ùå Failed to delete: $cache_key"
                fi
              fi
            done

            echo ""
            echo "‚úÖ Cache cleanup complete!"

      - name: quick
        description: Quick build and test
        steps:
          - |
            echo "üèÉ Running quick build and test..."
            go build ./... || { echo "‚ùå Build failed"; exit 1; }
            go test ./... -short || { echo "‚ùå Tests failed"; exit 1; }
            echo "‚úÖ Quick check complete!"

      - name: coverage
        description: Run tests with coverage report
        steps:
          - |
            echo "üìä Running tests with coverage..."
            go test -coverprofile=coverage.out ./...
            go tool cover -html=coverage.out -o coverage.html
            echo "‚úÖ Coverage report generated: coverage.html"
            echo "   Run 'open coverage.html' to view in browser"
