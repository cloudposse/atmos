name: "Website Deploy Preview"

on:
  workflow_dispatch:

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - "website/**"

env:
  AWS_REGION: us-east-2
  IAM_ROLE_ARN: arn:aws:iam::068007702576:role/cplive-plat-ue2-dev-atmos-docs-gha
  IAM_ROLE_SESSION_NAME: cloudposse-atmos-ci-deploy-pr-${{ github.event.pull_request.number }}
  S3_BUCKET_NAME: cplive-plat-ue2-dev-atmos-docs-origin
  PR_NUMBER: ${{ github.event.pull_request.number }}
  DEPLOYMENT_HOST: pr-${{ github.event.pull_request.number }}.atmos-docs.ue2.dev.plat.cloudposse.org
  ALGOLIA_INDEX_NAME: atmos-preview.tools
  ALGOLIA_APP_ID: 32YOERUX83

# These permissions are needed to interact with the GitHub's OIDC Token endpoint
permissions:
  id-token: write
  contents: read

jobs:
  website-deploy-preview:
    # Do not deploy the website to the preview environment if the PR has the label 'website-no-deploy'
    if: ${{ !contains(github.event.*.labels.*.name, 'website-no-deploy') }}

    runs-on: ubuntu-latest

    environment:
      name: preview
      url: https://${{ env.DEPLOYMENT_HOST }}

    steps:
      # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          role-session-name: ${{ env.IAM_ROLE_SESSION_NAME }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "website/.nvmrc"

      - name: Install Dependencies and Build Website
        run: |
          node --version
          cd website
          npm install --only=production
          npm run build:site

      - name: Copy Website to S3 Bucket PR Folder
        run: |
          cd website/build
          aws sts get-caller-identity
          aws s3 sync . s3://${{ env.S3_BUCKET_NAME }}/pr-${{ env.PR_NUMBER }}/ --delete
          aws s3 ls s3://${{ env.S3_BUCKET_NAME }}/pr-${{ env.PR_NUMBER }}/ --recursive --human-readable --summarize

      - name: ReIndex with Algolia
        if: ${{ contains(github.event.*.labels.*.name, 'reindex') }}
        env:
          ALGOLIA_SCRAPER_API_KEY: ${{ secrets.ALGOLIA_SCRAPER_API_KEY }}
        run: |
          ./website/algolia/reindex.sh
