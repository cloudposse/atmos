name: Tests
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "README.md"

  push:
    branches:
      - main
      - release/v*
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "examples/**"
      - "test/**"

  workflow_dispatch:

env:
  TERRAFORM_VERSION: "1.9.7"

jobs:
  # ensure the code builds...
  build:
    name: Build
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos
    runs-on: ${{ matrix.os }}
    steps:
      - name: Build
        run: echo "Building on ${{ matrix.os }}"

      - name: Add GNU tar to PATH (significantly faster than windows tar)
        if: matrix.target == 'windows'
        run: echo "C:\Program Files\Git\usr\bin" >> $Env:GITHUB_PATH

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
        id: go

      - name: Get dependencies
        run: |
          make deps

      - name: Build
        run: |
          make build-${{ matrix.target }}

      - name: Version
        run: |
          make version-${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.target }}
          path: |
            ./build/

  # run acceptance tests
  test:
    name: Acceptance Tests
    needs: build
    strategy:
      fail-fast: false
      matrix:
        flavor:
          - { os: ubuntu-latest, target: linux }
          - { os: windows-latest, target: windows }
          - { os: macos-latest, target: macos }
    timeout-minutes: 15
    runs-on: ${{ matrix.flavor.os }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Add GNU tar to PATH (significantly faster than windows tar)
        if: matrix.flavor.target == 'windows'
        run: echo "C:\Program Files\Git\usr\bin" >> $Env:GITHUB_PATH

      - name: Download build artifacts for ${{ matrix.flavor.target }}
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.flavor.target }}
          path: ${{ github.workspace }}

      - name: Add build artifacts directory to PATH for linux or macos
        if: matrix.flavor.target == 'linux' || matrix.flavor.target == 'macos'
        run: |
          echo "${{ github.workspace }}" >> $GITHUB_PATH
          chmod +x "${{ github.workspace }}/atmos"

      - name: Add build artifacts directory to PATH for windows
        if: matrix.flavor.target == 'windows'
        shell: pwsh
        run: |
          $atmosPath = Join-Path ${{ github.workspace }} "atmos.exe"
          if (-not (Test-Path $atmosPath)) {
            throw "atmos.exe not found at: $atmosPath"
          }
          echo "${{ github.workspace }}" >> $Env:GITHUB_PATH

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Check atmos.exe integrity
        if: matrix.flavor.target == 'windows'
        shell: pwsh
        run: |
          Write-Output "PATH=$Env:PATH"
          Write-Output "PATHEXT=$Env:PATHEXT"
          Get-ChildItem "${{ github.workspace }}"
          Get-Command "${{ github.workspace }}\atmos.exe"
          atmos version

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
        id: go

      - name: Get dependencies
        run: |
          make deps

      - name: Acceptance tests
        timeout-minutes: 10
        run: make testacc TEST_VERBOSITY=quiet

      - name: Run Go tests with go-test-action
        uses: robherley/go-test-action@v0
        with:
          moduleDirectory: '.'
          testArguments: '-v -timeout 20m ./...'

  docker:
    name: "Docker Lint"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
          format: sarif
          output-file: hadolint.sarif
          # https://github.com/hadolint/hadolint?tab=readme-ov-file#rules
          # DL3008 Pin versions in apt-get install
          ignore: DL3008

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: hadolint.sarif
          # Optional category for the results (used to differentiate multiple results for one commit)
          category: hadolint
          wait-for-processing: true

  # run localstack demo tests
  localstack:
    name: "[localstack] ${{ matrix.demo-folder }}"
    needs: build
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/local