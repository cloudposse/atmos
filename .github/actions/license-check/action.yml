name: 'License Attribution Check'
description: 'Checks Go dependencies for license compliance and required attributions'
branding:
  icon: 'shield'
  color: 'blue'

inputs:
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.24'
  fail-on-unknown:
    description: 'Fail if unknown licenses are detected'
    required: false
    default: 'true'
  create-report:
    description: 'Generate detailed license report as artifact'
    required: false
    default: 'true'

outputs:
  licenses-requiring-attribution:
    description: 'Number of dependencies requiring attribution'
    value: ${{ steps.count.outputs.count }}
  unknown-licenses:
    description: 'Number of dependencies with unknown licenses'
    value: ${{ steps.count.outputs.unknown }}
  missing-attributions:
    description: 'Number of dependencies missing from NOTICE file'
    value: ${{ steps.notice-check.outputs.missing_count }}
  notice-exists:
    description: 'Whether NOTICE file exists'
    value: ${{ steps.notice-check.outputs.notice_exists }}

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Install go-licenses
      shell: bash
      run: go install github.com/google/go-licenses@latest

    - name: Check for disallowed licenses
      shell: bash
      run: |
        echo "Checking for disallowed license types..."
        go-licenses check . --disallowed_types=forbidden,restricted,reciprocal 2>&1 | tee check-output.log || true

    - name: Generate license report
      shell: bash
      run: |
        echo "Generating comprehensive license report..."
        go-licenses report . 2>&1 | tee license-report-full.log

        # Extract clean report (without warnings)
        grep -v "^W" license-report-full.log | grep -v "^E" > license-report.csv || true

        echo "License report generated: license-report.csv"

    - name: Analyze attribution requirements
      id: count
      shell: bash
      run: |
        # Count dependencies by license type
        echo "## License Distribution" > license-summary.md
        echo "" >> license-summary.md

        grep -v "^W" license-report-full.log | grep -v "^E" | \
          awk -F',' '{print $3}' | sort | uniq -c | sort -rn | \
          awk '{printf "- **%s**: %d\n", $2, $1}' >> license-summary.md || true

        echo "" >> license-summary.md

        # Count dependencies requiring attribution (Apache-2.0, BSD variants)
        ATTRIBUTION_COUNT=$(grep -v "^W" license-report-full.log | grep -v "^E" | \
          grep -cE "Apache-2.0|BSD-.*Clause" || echo "0")

        echo "attribution_count=$ATTRIBUTION_COUNT" >> license-summary.md
        echo "count=$ATTRIBUTION_COUNT" >> $GITHUB_OUTPUT

        # Count unknown licenses
        UNKNOWN_COUNT=$(grep -v "^W" license-report-full.log | grep -v "^E" | \
          grep -c "Unknown" || echo "0")

        echo "unknown_count=$UNKNOWN_COUNT" >> license-summary.md
        echo "unknown=$UNKNOWN_COUNT" >> $GITHUB_OUTPUT

        # Extract dependencies requiring attribution
        echo "" >> license-summary.md
        echo "## Dependencies Requiring Attribution ($ATTRIBUTION_COUNT)" >> license-summary.md
        echo "" >> license-summary.md

        grep -v "^W" license-report-full.log | grep -v "^E" | \
          grep -E "Apache-2.0|BSD-.*Clause" | \
          awk -F',' '{printf "- %s (%s)\n", $1, $3}' | \
          sort >> license-summary.md || true

        cat license-summary.md

    - name: Check for unknown licenses
      shell: bash
      run: |
        UNKNOWN=$(grep -v "^W" license-report-full.log | grep -v "^E" | grep -c "Unknown" || echo "0")

        if [ "$UNKNOWN" -gt 0 ]; then
          echo "::warning::Found $UNKNOWN dependencies with unknown licenses"
          grep -v "^W" license-report-full.log | grep -v "^E" | grep "Unknown" || true

          if [ "${{ inputs.fail-on-unknown }}" == "true" ]; then
            echo "::error::Unknown licenses detected. Please verify these dependencies have valid licenses."
            exit 1
          fi
        fi

    - name: Check NOTICE file exists and completeness
      id: notice-check
      shell: bash
      run: |
        ATTRIBUTION_COUNT=$(grep -v "^W" license-report-full.log | grep -v "^E" | \
          grep -cE "Apache-2.0|BSD-.*Clause" || echo "0")

        if [ ! -f "NOTICE" ]; then
          echo "::error::NOTICE file is missing but $ATTRIBUTION_COUNT dependencies require attribution"
          echo "::error::Please create a NOTICE file with copyright notices for Apache-2.0 and BSD-licensed dependencies"
          echo "notice_exists=false" >> $GITHUB_OUTPUT
          echo "missing_count=$ATTRIBUTION_COUNT" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ NOTICE file exists"
          echo "📊 Dependencies requiring attribution: $ATTRIBUTION_COUNT"
          echo "notice_exists=true" >> $GITHUB_OUTPUT
        fi

        # Check for missing attributions by comparing license-report.csv with NOTICE
        grep -v "^W" license-report-full.log | grep -v "^E" | \
          grep -E "Apache-2.0|BSD-.*Clause" | \
          awk -F',' '{print $1}' | sort > required-deps.txt

        # Extract package names from NOTICE (lines starting with "  - ")
        grep "^  - " NOTICE | sed 's/^  - //' | sort > noticed-deps.txt

        # Find missing dependencies
        comm -23 required-deps.txt noticed-deps.txt > missing-deps.txt || true

        MISSING_COUNT=$(wc -l < missing-deps.txt | tr -d ' ')
        echo "missing_count=$MISSING_COUNT" >> $GITHUB_OUTPUT

        if [ "$MISSING_COUNT" -gt 0 ]; then
          echo "::warning::Found $MISSING_COUNT dependencies missing from NOTICE file"
          echo "" >> license-summary.md
          echo "## ⚠️ Missing Attributions ($MISSING_COUNT)" >> license-summary.md
          echo "" >> license-summary.md
          echo "The following dependencies require attribution but are missing from the NOTICE file:" >> license-summary.md
          echo "" >> license-summary.md

          # Generate the exact text to add to NOTICE
          echo '```' >> license-summary.md
          while IFS= read -r dep; do
            # Find the full entry in license-report.csv
            grep "^${dep}," license-report.csv | \
              awk -F',' '{printf "  - %s\n    License: %s\n    URL: %s\n\n", $1, $3, $2}'
          done < missing-deps.txt >> license-summary.md
          echo '```' >> license-summary.md

          echo "" >> license-summary.md
          echo "**Action Required:** Add the above entries to the appropriate section in the NOTICE file." >> license-summary.md
          echo "" >> license-summary.md
          echo "Or run: \`./scripts/generate-notice.sh\` to regenerate the entire NOTICE file." >> license-summary.md
        else
          echo "✅ All dependencies are properly attributed in NOTICE file"
        fi

    - name: Generate workflow summary
      shell: bash
      run: |
        MISSING="${{ steps.notice-check.outputs.missing_count }}"

        if [ "$MISSING" = "0" ]; then
          echo "## License Check Complete ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "## License Check - Missing Attributions ⚠️" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies requiring attribution: ${{ steps.count.outputs.count }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies with unknown licenses: ${{ steps.count.outputs.unknown }}" >> $GITHUB_STEP_SUMMARY
        echo "- Missing attributions: ${MISSING}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat license-summary.md >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Read the license summary
          let summary = '';
          try {
            summary = fs.readFileSync('license-summary.md', 'utf8');
          } catch (error) {
            summary = 'Could not read license summary';
          }

          const body = `## 📋 License Attribution Check

          ${summary}

          <details>
          <summary>View full license report</summary>

          Download the \`license-report\` artifact from this workflow run for detailed information.

          </details>

          ---
          *This check ensures all dependencies with Apache-2.0 and BSD licenses are properly attributed in the NOTICE file.*
          `;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('License Attribution Check')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Upload license report
      if: inputs.create-report == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license-report.csv
          license-summary.md
          license-report-full.log
        retention-days: 90
