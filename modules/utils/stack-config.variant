#!/usr/bin/env variant
# vim: filetype=hcl

job "stack config" {
  concurrency = 1
  description = "Generate stack config in YAML or JSON format"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
    default     = ""
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "type" {
    type        = string
    description = "Type (`terraform`, `helmfile`)"
  }

  option "format" {
    default     = "yaml"
    type        = string
    description = "Output format (`yaml`, `json`)"
  }

  option "merge" {
    default     = true
    type        = bool
    description = "Whether to merge global and component configs into a flat map"
  }

  config "stack-config" {
    source file {
      path = "${opt.config-dir}/${opt.stack}.yaml"
    }
  }

  # 1st level of imports
  variable "import-paths-1" {
    value = try(conf.stack-config.import, null) != null ? conf.stack-config.import : []
  }

  variable "imports-1" {
    value = merge(
    [
      for p in var.import-paths-1 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 2nd level of imports
  variable "import-paths-2" {
    value = try(var.imports-1.import, null) != null ? var.imports-1.import : []
  }

  variable "imports-2" {
    value = merge(
    [
      for p in var.import-paths-2 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 3rd level of imports
  variable "import-paths-3" {
    value = try(var.imports-2.import, null) != null ? var.imports-2.import : []
  }

  variable "imports-3" {
    value = merge(
    [
      for p in var.import-paths-3 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 4th level of imports
  variable "import-paths-4" {
    value = try(var.imports-3.import, null) != null ? var.imports-3.import : []
  }

  variable "imports-4" {
    value = merge(
    [
      for p in var.import-paths-4 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 5th level of imports
  variable "import-paths-5" {
    value = try(var.imports-4.import, null) != null ? var.imports-4.import : []
  }

  variable "imports-5" {
    value = merge(
    [
      for p in var.import-paths-5 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  variable "vars" {
    value = merge(
      # Merge the global vars in the order of imports
      try(var.imports-5["vars"], {}),
      try(var.imports-4["vars"], {}),
      try(var.imports-3["vars"], {}),
      try(var.imports-2["vars"], {}),
      try(var.imports-1["vars"], {}),
      try(conf.stack-config["vars"], {}),

      # Merge the type vars (terraform, helmfile) in the order of imports
      try(var.imports-5[opt.type]["vars"], {}),
      try(var.imports-4[opt.type]["vars"], {}),
      try(var.imports-3[opt.type]["vars"], {}),
      try(var.imports-2[opt.type]["vars"], {}),
      try(var.imports-1[opt.type]["vars"], {}),
      try(conf.stack-config[opt.type]["vars"], {}),

      # Merge the component vars in the order of imports
      try(var.imports-5.components[opt.type][param.component]["vars"], {}),
      try(var.imports-4.components[opt.type][param.component]["vars"], {}),
      try(var.imports-3.components[opt.type][param.component]["vars"], {}),
      try(var.imports-2.components[opt.type][param.component]["vars"], {}),
      try(var.imports-1.components[opt.type][param.component]["vars"], {}),
      try(conf.stack-config.components[opt.type][param.component]["vars"], {})
    )
  }

  exec {
    command = "echo"
    args = [
      opt.merge ?
        (opt.format == "json" ? jsonencode(var.vars) : yamlencode(var.vars))
        :
        (opt.format == "json" ? jsonencode(var.vars) : yamlencode(var.vars))
    ]
  }
}
