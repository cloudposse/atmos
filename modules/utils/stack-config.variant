#!/usr/bin/env variant
# vim: filetype=hcl

function "import" {
  params = [config-dir, path]

  result = flatten(
    concat(
      [
        for k, imports in yamldecode(file(format("%s/%s.yaml", config-dir, path))): [
          for imported in imports: [
            import(config-dir, imported)
          ]
        ] if k == "import"
      ],
      [
        format("%s/%s.yaml", config-dir, path)
      ]
    )
  )
}

job "stack-config-echo" {
  private = true

  option "opt1" {
    type = string
  }

  exec {
    command = "echo"
    args = [opt.opt1]
  }
}

job "stack config" {
  concurrency = 1
  description = "Generate stack config in YAML or JSON format"

  parameter "component" {
    type        = string
    description = "Component"
    default     = ""
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "component-type" {
    type        = string
    description = "Component type (`terraform`, `helmfile`)"
    default     = "terraform"
  }

  option "config-type" {
    type        = string
    description = "Config type (`vars`, `backend-type`, `backend`, `command`, `all`)"
    default     = "vars"
  }

  option "format" {
    default     = "yaml"
    type        = string
    description = "Output format (`yaml`, `json`)"
  }

  variable "files" {
    value = import(opt.config-dir, opt.stack)
  }

  config "all" {
    source file {
      paths = var.files
    }
  }

  # Deep-merge all variables in this order: global-scoped, component-type-scoped, and component-scoped
  config "vars" {
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all["vars"], {}))
      }
    }
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all[opt.component-type]["vars"], {}))
      }
    }
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all.components[opt.component-type][param.component]["vars"], {}))
      }
    }
  }

  variable "command" {
    value = coalesce(
      try(conf.all["command"], null),
      try(conf.all[opt.component-type]["command"], null),
      try(conf.all.components[opt.component-type][param.component]["command"], null),
      opt.component-type
    )
  }

  variable "backend-type" {
    value = coalesce(
      try(conf.all["backend_type"], null),
      try(conf.all[opt.component-type]["backend_type"], null),
      try(conf.all.components[opt.component-type][param.component]["backend_type"], null),
      "s3"
    )
  }

  # Deep-merge all backend attributes in this order: global-scoped, component-type-scoped, and component-scoped
  config "backend" {
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all["backend"][var.backend-type], {}))
      }
    }
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all[opt.component-type]["backend"][var.backend-type], {}))
      }
    }
    source job {
      name = "stack-config-echo"
      args = {
        opt1 = yamlencode(try(conf.all.components[opt.component-type][param.component]["backend"][var.backend-type], {}))
      }
    }
  }

  variable "output" {
    value = {
      vars         = conf.vars,
      command      = { command = var.command },
      backend      = { "${var.backend-type}" = conf.backend },
      backend-type = var.backend-type,
      all          = conf.all
    }
  }

  exec {
    command = "echo"
    args = [
        opt.format == "json" ? jsonencode(var.output[opt.config-type]) : yamlencode(var.output[opt.config-type])
    ]
  }
}
