#!/usr/bin/env variant
# vim: filetype=hcl

job "stack config" {
  concurrency = 1
  description = "Generate stack config in YAML or JSON format"

  parameter "component" {
    type        = string
    description = "Component"
    default     = ""
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "component-type" {
    type        = string
    description = "Component type (`terraform`, `helmfile`)"
    default     = "terraform"
  }

  option "config-type" {
    type        = string
    description = "Config type (`vars`, `backend`, `command`)"
    default     = "vars"
  }

  option "format" {
    default     = "yaml"
    type        = string
    description = "Output format (`yaml`, `json`)"
  }

  config "stack-config" {
    source file {
      path = "${opt.config-dir}/${opt.stack}.yaml"
    }
  }

  # 1st level of imports
  variable "import-paths-1" {
    value = try(conf.stack-config.import, null) != null ? conf.stack-config.import : []
  }

  variable "imports-1" {
    value = merge(
    [
      for p in var.import-paths-1 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 2nd level of imports
  variable "import-paths-2" {
    value = try(var.imports-1.import, null) != null ? var.imports-1.import : []
  }

  variable "imports-2" {
    value = merge(
    [
      for p in var.import-paths-2 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 3rd level of imports
  variable "import-paths-3" {
    value = try(var.imports-2.import, null) != null ? var.imports-2.import : []
  }

  variable "imports-3" {
    value = merge(
    [
      for p in var.import-paths-3 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 4th level of imports
  variable "import-paths-4" {
    value = try(var.imports-3.import, null) != null ? var.imports-3.import : []
  }

  variable "imports-4" {
    value = merge(
    [
      for p in var.import-paths-4 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 5th level of imports
  variable "import-paths-5" {
    value = try(var.imports-4.import, null) != null ? var.imports-4.import : []
  }

  variable "imports-5" {
    value = merge(
    [
      for p in var.import-paths-5 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 6th level of imports
  variable "import-paths-6" {
    value = try(var.imports-5.import, null) != null ? var.imports-5.import : []
  }

  variable "imports-6" {
    value = merge(
    [
      for p in var.import-paths-6 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 7th level of imports
  variable "import-paths-7" {
    value = try(var.imports-6.import, null) != null ? var.imports-6.import : []
  }

  variable "imports-7" {
    value = merge(
    [
      for p in var.import-paths-7 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 8th level of imports
  variable "import-paths-8" {
    value = try(var.imports-7.import, null) != null ? var.imports-7.import : []
  }

  variable "imports-8" {
    value = merge(
    [
      for p in var.import-paths-8 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 9th level of imports
  variable "import-paths-9" {
    value = try(var.imports-8.import, null) != null ? var.imports-8.import : []
  }

  variable "imports-9" {
    value = merge(
    [
      for p in var.import-paths-9 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  # 10th level of imports
  variable "import-paths-10" {
    value = try(var.imports-9.import, null) != null ? var.imports-9.import : []
  }

  variable "imports-10" {
    value = merge(
    [
      for p in var.import-paths-10 : {
        for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
      }
    ]
    ...)
  }

  variable "vars" {
    value = merge(
      # Merge the global vars in the order of imports
      try(var.imports-10["vars"], {}),
      try(var.imports-9["vars"], {}),
      try(var.imports-8["vars"], {}),
      try(var.imports-7["vars"], {}),
      try(var.imports-6["vars"], {}),
      try(var.imports-5["vars"], {}),
      try(var.imports-4["vars"], {}),
      try(var.imports-3["vars"], {}),
      try(var.imports-2["vars"], {}),
      try(var.imports-1["vars"], {}),
      try(conf.stack-config["vars"], {}),

      # Merge the component type vars (terraform, helmfile) in the order of imports
      try(var.imports-10[opt.component-type]["vars"], {}),
      try(var.imports-9[opt.component-type]["vars"], {}),
      try(var.imports-8[opt.component-type]["vars"], {}),
      try(var.imports-7[opt.component-type]["vars"], {}),
      try(var.imports-6[opt.component-type]["vars"], {}),
      try(var.imports-5[opt.component-type]["vars"], {}),
      try(var.imports-4[opt.component-type]["vars"], {}),
      try(var.imports-3[opt.component-type]["vars"], {}),
      try(var.imports-2[opt.component-type]["vars"], {}),
      try(var.imports-1[opt.component-type]["vars"], {}),
      try(conf.stack-config[opt.component-type]["vars"], {}),

      # Merge the component vars in the order of imports
      try(var.imports-10.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-9.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-8.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-7.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-6.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-5.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-4.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-3.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-2.components[opt.component-type][param.component]["vars"], {}),
      try(var.imports-1.components[opt.component-type][param.component]["vars"], {}),
      try(conf.stack-config.components[opt.component-type][param.component]["vars"], {})
    )
  }

  variable "command" {
    value = { command = coalesce(
        try(var.imports-10["command"], null),
        try(var.imports-9["command"], null),
        try(var.imports-8["command"], null),
        try(var.imports-7["command"], null),
        try(var.imports-6["command"], null),
        try(var.imports-5["command"], null),
        try(var.imports-4["command"], null),
        try(var.imports-3["command"], null),
        try(var.imports-2["command"], null),
        try(var.imports-1["command"], null),
        try(conf.stack-config["command"], null),

        try(var.imports-10[opt.component-type]["command"], null),
        try(var.imports-9[opt.component-type]["command"], null),
        try(var.imports-8[opt.component-type]["command"], null),
        try(var.imports-7[opt.component-type]["command"], null),
        try(var.imports-6[opt.component-type]["command"], null),
        try(var.imports-5[opt.component-type]["command"], null),
        try(var.imports-4[opt.component-type]["command"], null),
        try(var.imports-3[opt.component-type]["command"], null),
        try(var.imports-2[opt.component-type]["command"], null),
        try(var.imports-1[opt.component-type]["command"], null),
        try(conf.stack-config[opt.component-type]["command"], null),

        try(var.imports-10.components[opt.component-type][param.component]["command"], null),
        try(var.imports-9.components[opt.component-type][param.component]["command"], null),
        try(var.imports-8.components[opt.component-type][param.component]["command"], null),
        try(var.imports-7.components[opt.component-type][param.component]["command"], null),
        try(var.imports-6.components[opt.component-type][param.component]["command"], null),
        try(var.imports-5.components[opt.component-type][param.component]["command"], null),
        try(var.imports-4.components[opt.component-type][param.component]["command"], null),
        try(var.imports-3.components[opt.component-type][param.component]["command"], null),
        try(var.imports-2.components[opt.component-type][param.component]["command"], null),
        try(var.imports-1.components[opt.component-type][param.component]["command"], null),
        try(conf.stack-config.components[opt.component-type][param.component]["command"], null),

        opt.component-type
      )
    }
  }

  variable "backend-type" {
    value = coalesce(
      try(var.imports-10["backend_type"], null),
      try(var.imports-9["backend_type"], null),
      try(var.imports-8["backend_type"], null),
      try(var.imports-7["backend_type"], null),
      try(var.imports-6["backend_type"], null),
      try(var.imports-5["backend_type"], null),
      try(var.imports-4["backend_type"], null),
      try(var.imports-3["backend_type"], null),
      try(var.imports-2["backend_type"], null),
      try(var.imports-1["backend_type"], null),
      try(conf.stack-config["backend_type"], null),

      try(var.imports-10[opt.component-type]["backend_type"], null),
      try(var.imports-9[opt.component-type]["backend_type"], null),
      try(var.imports-8[opt.component-type]["backend_type"], null),
      try(var.imports-7[opt.component-type]["backend_type"], null),
      try(var.imports-6[opt.component-type]["backend_type"], null),
      try(var.imports-5[opt.component-type]["backend_type"], null),
      try(var.imports-4[opt.component-type]["backend_type"], null),
      try(var.imports-3[opt.component-type]["backend_type"], null),
      try(var.imports-2[opt.component-type]["backend_type"], null),
      try(var.imports-1[opt.component-type]["backend_type"], null),
      try(conf.stack-config[opt.component-type]["backend_type"], null),

      try(var.imports-10.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-9.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-8.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-7.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-6.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-5.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-4.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-3.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-2.components[opt.component-type][param.component]["backend_type"], null),
      try(var.imports-1.components[opt.component-type][param.component]["backend_type"], null),
      try(conf.stack-config.components[opt.component-type][param.component]["backend_type"], null),

      "s3"
    )
  }

  variable "backend" {
    value = merge(
      try(var.imports-10["backend"][var.backend-type], {}),
      try(var.imports-9["backend"][var.backend-type], {}),
      try(var.imports-8["backend"][var.backend-type], {}),
      try(var.imports-7["backend"][var.backend-type], {}),
      try(var.imports-6["backend"][var.backend-type], {}),
      try(var.imports-5["backend"][var.backend-type], {}),
      try(var.imports-4["backend"][var.backend-type], {}),
      try(var.imports-3["backend"][var.backend-type], {}),
      try(var.imports-2["backend"][var.backend-type], {}),
      try(var.imports-1["backend"][var.backend-type], {}),
      try(conf.stack-config["backend"][var.backend-type], {}),

      try(var.imports-10[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-9[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-8[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-7[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-6[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-5[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-4[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-3[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-2[opt.component-type]["backend"][var.backend-type], {}),
      try(var.imports-1[opt.component-type]["backend"][var.backend-type], {}),
      try(conf.stack-config[opt.component-type]["backend"][var.backend-type], {}),

      try(var.imports-10.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-9.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-8.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-7.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-6.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-5.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-4.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-3.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-2.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(var.imports-1.components[opt.component-type][param.component]["backend"][var.backend-type], {}),
      try(conf.stack-config.components[opt.component-type][param.component]["backend"][var.backend-type], {})
    )
  }

  variable "output" {
    value = {
      vars    = var.vars,
      command = var.command,
      backend = { "${var.backend-type}" = var.backend }
    }
  }

  exec {
    command = "echo"
    args = [
        opt.format == "json" ? jsonencode(var.output[opt.config-type]) : yamlencode(var.output[opt.config-type])
    ]
  }
}
