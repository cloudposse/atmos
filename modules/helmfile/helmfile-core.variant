#!/usr/bin/env variant
# vim: filetype=hcl

job "helmfile subcommand" {
  concurrency = 1
  description = "Run a helmfile subcommand"
  private     = true

  parameter "project" {
    description = "helmfile project"
    type        = string
  }

  option "command" {
    default     = "helmfile"
    type        = string
    description = "Binary to execute, e.g. 'helmfile', or path to the binary, e.g. '/usr/local/bin/helmfile'"
  }

  option "subcommand" {
    description = "helmfile subcommand to run"
    type        = string
  }

  option "environment" {
    default     = ""
    type        = string
    description = "Environment"
    short       = "e"
  }

  option "stage" {
    type        = string
    description = "Stage"
    short       = "s"
  }

  option "args" {
    default     = ""
    description = "A string of global arguments to supply to the helmfile"
    type        = string
  }

  option "sub-args" {
    default     = ""
    description = "A string of arguments to supply to the helmfile subcommand"
    type        = string
  }

  option "env" {
    default     = {}
    description = "Environment variables for the helmfile subcommand"
    type        = map(string)
  }

  option "vault" {
    default     = false
    description = "Pull secrets from vault"
    type        = bool
  }

  option "namespace" {
    default     = ""
    description = "kube namespace"
    short       = "n"
    type        = string
  }

  option "service" {
    default     = ""
    description = "Service name which will be getting deployed"
    type        = string
  }

  option "image-tag" {
    default     = ""
    description = "Image tag to set for helmfile subcommand"
    type        = string
  }

  option "istio-inject" {
    default     = false
    description = "Add istio inject sidecar label to namespace"
    type        = bool
  }

  # Find project settings
  config "env-config" {
    source job {
      name = "helmfile config"
      args = {
        project     = param.project
        environment = opt.environment
        stage       = opt.stage
        format      = "json"
        merge       = true
      }
    }
  }

  # Find helmfile binary to execute
  config "helmfile-command" {
    source job {
      name = "helmfile-command"
      args = {
        project     = param.project
        command     = opt.command
        environment = opt.environment
        stage       = opt.stage
      }
    }
  }

  config "service_secrets" {
    source job {
      name = "vault get service secrets as env"
      args = {
        stage       = opt.stage
        svc         = opt.service
        namespace   = opt.namespace
        environment = opt.environment
        no-execute  = !opt.vault
      }
    }
  }

  variable "sub-args" {
    type  = list(string)
    value = split(" ", opt.sub-args)
  }

  variable "image-tag-arg" {
    type = list(string)
    value = opt.image-tag != "" ? ["--set", "image.tag=${opt.image-tag}"] : []
  }

  variable "namespace-arg" {
    type = list(string)
    value = opt.namespace != "" ? ["--namespace", opt.namespace] : []
  }

  variable "args" {
    type  = list(string)
    value = compact(concat(
      var.namespace-arg,
      split(" ", opt.args),
      [
        "--environment",
        "default",
        "--state-values-file",
        "./${conf.env-config.environment}-${conf.env-config.stage}.helmfile.vars.yaml",
        opt.subcommand
      ],
      var.sub-args,
      var.image-tag-arg
    ))
  }

  variable "aws-profile" {
    value = can(conf.env-config.aws_profile) ? { AWS_PROFILE = conf.env-config.aws_profile} : {}
  }

  variable "service-name-env" {
    value = can(opt.service) ? { SERVICE_NAME = opt.service } : {}
  }

  step "helmfile kubeconfig" {
    run "aws eks kubeconfig" {
      environment  = opt.environment
      stage        = opt.stage
    }
  }

  step "helmfile write varfile" {
    run "helmfile write varfile" {
      project     = param.project
      environment = opt.environment
      stage       = opt.stage
    }
  }

  step "create namespace" {
    run "create-namespace" {
      env-config = merge(
        opt.env,
        {
          KUBECONFIG  = "${opt.kubeconfig-path}/${conf.env-config.environment}-${conf.env-config.stage}-kubecfg",
        },
        var.aws-profile,
      )

      namespace    = opt.namespace
      istio-inject = opt.istio-inject
    }
  }

  step "helmfile exec" {
    run "shell" {
      command = conf.helmfile-command.command
      args    = var.args
      dir     = "${opt.helmfile-dir}/${param.project}"
      env     = merge(
        opt.env,
        {
          KUBECONFIG  = "${opt.kubeconfig-path}/${conf.env-config.environment}-${conf.env-config.stage}-kubecfg",
          ENVIRONMENT = opt.environment,
          REGION      = opt.environment,
          STAGE       = opt.stage,
          CLUSTER_ID  = opt.stage,
        },
        var.aws-profile,
        var.service-name-env,
        conf.service_secrets
      )
    }
  }

  step "helmfile clean" {
    run "shell" {
      command = "rm"
      args    = ["${opt.helmfile-dir}/${param.project}/${conf.env-config.environment}-${conf.env-config.stage}.helmfile.vars.yaml"]
    }
  }
}

job "helmfile write varfile" {
  description = "Write varfile for a specific project, environment and stage"
  private     = true

  parameter "project" {
    type        = string
    description = "Project"
  }

  option "environment" {
    default     = ""
    type        = string
    description = "Environment"
    short       = "e"
  }

  option "stage" {
    type        = string
    description = "Stage"
    short       = "s"
  }

  config "env-config" {
    source job {
      name = "helmfile config"
      args = {
        project     = param.project
        environment = opt.environment
        stage       = opt.stage
        format      = "yaml"
        merge       = true
      }
    }
  }

  exec {
    command = "echo"

    args = [
      yamlencode(conf.env-config)
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.helmfile-dir}/${param.project}/${conf.env-config.environment}-${conf.env-config.stage}.helmfile.vars.yaml"
  }
}
