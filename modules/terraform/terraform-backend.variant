#!/usr/bin/env variant
# vim: filetype=hcl

job "terraform backend generate" {
  variable "project-list" {
    value = distinct([for file in fileset("${opt.terraform-dir}/", "*/*.tf") : basename(dirname(file))])
  }

  depends_on "terraform backend generate project" {
    items = var.project-list

    args  = {
      project = item
    }
  }
}

job "terraform backend generate project" {
  concurrency = 1
  description = "Generate tfstate config for project"

  option "project" {
    type        = string
    description = "Project"
  }

  config "config-project" {
    source job {
      name = "terraform backend config project"
      args = {
        project = opt.project
      }
    }
  }

  exec {
    command = "echo"
    args = [
      jsonencode(
      { "terraform": conf.config-project }
      )
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.terraform-dir}/${opt.project}/backend.tf.json"
  }
}

job "terraform backend config global" {
  concurrency = 1
  private     = true

  option "section" {
    type    = string
    default = "terraform"
  }

  config "globals" {
    source file {
      path = "${opt.config-dir}/globals.yaml"
    }
  }

  exec {
    command = "echo"
    args = [ yamlencode(conf.globals[opt.section]) ]
  }
}

job "terraform backend config project defaults" {
  concurrency = 1
  private     = true

  option "project" {
    type = string
    default = ""
  }

  variable "conf" {
    value = {
      "backend" = {
        "s3": {
          "workspace_key_prefix" = opt.project
        }
      }
    }
  }

  exec {
    command = "echo"
    args = [ yamlencode(var.conf) ]
  }
}

job "terraform backend config project raw" {
  concurrency = 1
  private     = true

  option "project" {
    type    = string
    default = ""
  }

  config "projects" {
    source file {
      path = "${opt.config-dir}/globals.yaml"
    }
  }

  exec {
    command = "echo"

    args = [
      try(yamlencode(conf.projects["projects"]["terraform"][opt.project]), "")
    ]
  }
}

job "terraform backend config project" {
  concurrency = 1
  private     = true

  option "project" {
    type    = string
  }

  config "project" {
    source job {
      name = "terraform backend config global"
      args = {
        section = "terraform"
      }
    }

    source job {
      name = "terraform backend config project defaults"
      args = {
        project = opt.project
      }
    }

    source job {
      name = "terraform backend config project raw"
      args = {
        project = opt.project
      }
    }
  }

  exec {
    command = "echo"

    args = [
      yamlencode(conf.project)
    ]
  }
}
