#!/usr/bin/env variant
# vim: filetype=hcl

job "terraform config" {
  concurrency = 1
  description = "Show config in YAML or JSON format"

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "format" {
    default     = "yaml"
    type        = string
    description = "Format, YAML or JSON"
  }

  option "merge" {
    default     = true
    type        = bool
    description = "Whether to merge global and component configs into a flat map"
  }

  config "stack-config" {
    source file {
      path = "${opt.config-dir}/${opt.stack}.yaml"
    }
  }

  variable "component-all-config" {
    value = conf.stack-config.components.terraform[param.component]
  }

  variable "component-vars" {
    value = lookup(var.component-all-config, "vars", {})
  }

  variable "stack-globals" {
    value = lookup(conf.stack-config, "globals", {})
  }

  variable "import-paths" {
    value = try(conf.stack-config.import, null) != null ? conf.stack-config.import : []
  }

  variable "imports" {
    value = merge(
      [
        for p in var.import-paths : {
          for k, v in yamldecode(file(format("%s/%s.yaml", opt.config-dir, p))) : k => v
        }
      ]
      ...)
  }

  variable "imports-stack-globals-component-vars" {
    value = merge(var.imports, var.stack-globals, var.component-vars)
  }

  variable "imports-stack-globals-component-all-config" {
    value = merge(var.imports, var.stack-globals, var.component-all-config)
  }

  exec {
    command = "echo"
    args = [
      opt.merge ?
        (opt.format == "json" ? jsonencode(var.imports-stack-globals-component-vars) : yamlencode(var.imports-stack-globals-component-vars))
        :
        (opt.format == "json" ? jsonencode(var.imports-stack-globals-component-all-config) : yamlencode(var.imports-stack-globals-component-all-config))
    ]
  }
}
