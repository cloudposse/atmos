#!/usr/bin/env variant
# vim: filetype=hcl

job "terraform config" {
  concurrency = 1
  description = "Show config in YAML or JSON format for a terraform project, environment and stage"

  parameter "project" {
    type        = string
    description = "Project"
  }

  option "environment" {
    default     = ""
    type        = string
    description = "Environment"
    short       = "e"
  }

  option "stage" {
    type        = string
    description = "Stage"
    short       = "s"
  }

  option "format" {
    default     = "yaml"
    type        = string
    description = "Format, YAML or JSON"
  }

  option "merge" {
    default     = true
    type        = bool
    description = "Whether to merge global and project configs into a flat map"
  }

  config "project-global-config" {
    source file {
      path = "${opt.config-dir}/projects.yaml"
      default = ""
    }
  }

  config "global-config" {
    source file {
      path = "${opt.config-dir}/${opt.environment}-globals.yaml"
    }
  }

  config "env-config" {
    source file {
      path = "${opt.config-dir}/${opt.environment}-${opt.stage}.yaml"
    }
  }

  variable "project-global-base" {
    value = lookup(lookup(conf.project-global-config, param.project, {}), "terraform", {})
  }

  variable "project-config" {
    value = conf.env-config.projects.terraform[param.project]
  }

  variable "vars" {
    value = lookup(var.project-config, "vars", {})
  }

  exec {
    command = "echo"
    args = [
      opt.merge ?
        (opt.format == "json" ?  jsonencode(merge(var.project-global-base, conf.global-config, conf.env-config.projects.globals, var.vars)) :
                                 yamlencode(merge(var.project-global-base, conf.global-config, conf.env-config.projects.globals, var.vars)))
        :
        (opt.format == "json" ?  jsonencode(merge(var.project-global-base, conf.global-config, conf.env-config.projects.globals, var.project-config)) :
                                 yamlencode(merge(var.project-global-base, conf.global-config, conf.env-config.projects.globals, var.project-config)))
    ]
  }
}

# Find 'terraform' binary to execute.
# It could come from the config file 'command' attribute, or from the '--command=' command line argument.
# Otherwise, the default 'terraform' binary will be used (from the PATH)
job "terraform-command" {
  concurrency = 1
  description = "Find 'terraform' binary to execute"
  private     = true

  parameter "project" {
    type        = string
    description = "Project"
  }

  option "environment" {
    default     = ""
    type        = string
    description = "Environment"
    short       = "e"
  }

  option "stage" {
    type        = string
    description = "Stage"
    short       = "s"
  }

  option "command" {
    default     = "terraform"
    type        = string
    description = "Command to execute, e.g. 'terraform', or path to the command, e.g. '/usr/local/terraform/0.13/bin/terraform'"
  }

  config "env-config" {
    source job {
      name = "terraform config"
      args = {
        project     = param.project
        environment = opt.environment
        stage       = opt.stage
        format      = "json"
        merge       = false
      }
    }
  }

  variable "command" {
    value = coalesce(lookup(conf.env-config, "command", null), opt.command)
  }

  exec {
    command = "echo"
    args    = list("command: ${var.command}")
  }
}
