#!/usr/bin/env variant
# vim: filetype=hcl

job "terraform backend S3 generate" {
  description = "Generate Terraform backend S3 config for all components in a stack"

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  variable "component-list" {
    value = distinct([for file in fileset("${opt.terraform-dir}/", "*/*.tf") : basename(dirname(file))])
  }

  depends_on "terraform backend generate component" {
    items = var.component-list

    args  = {
      component = item
      stack     = opt.stack
    }
  }
}

job "terraform backend S3 generate component" {
  concurrency = 1
  description = "Generate Terraform backend S3 config for a component in a stack"

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  config "stack-config" {
    source job {
      name = "terraform config"
      args = {
        component   = param.component
        stack       = opt.stack
        format      = "json"
        merge       = false
      }
    }
  }

  variable "stack-config" {
    value = conf.stack-config
  }

  variable "terraform_backend_assume_role" {
    value = coalesce(lookup(var.stack-config, "terraform_backend_assume_role", null), true)
  }

  variable "assume_role_arn" {
    value = var.terraform_backend_assume_role ? (
      format("arn:aws:iam::%s:role/%s-%s-%s-terraform",
          var.stack-config.account_id,
          var.stack-config.namespace,
          var.stack-config.terraform_backend_role_environment,
          var.stack-config.terraform_backend_role_stage
      )
    ) : null
  }

  variable "template_file" {
    value = file("${opt.config-dir}/terraform-backend-s3-template.json")
  }

  #variable "rendered_template" {
    #value = replace(var.template_file, "${namespace}", var.stack-config.namespace)
  #}

  exec {
    command = "echo"
    args = [
      # var.rendered_template
      jsonencode(var.stack-config)
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.terraform-dir}/${param.component}/backend.s3.tf.json"
  }
}
