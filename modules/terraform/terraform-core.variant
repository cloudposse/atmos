#!/usr/bin/env variant
# vim: filetype=hcl

job "terraform subcommand" {
  description = "Execute a terraform subcommand"
  private     = true

  option "command" {
    default     = "terraform"
    type        = string
    description = "Command to execute, e.g. 'terraform', or path to the command, e.g. '/usr/local/terraform/0.13/bin/terraform'"
  }

  option "subcommand" {
    type        = string
    description = "A terraform subcommand to execute"
  }

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "args" {
    default     = []
    description = "args to pass to the subcommand"
    type        = list(string)
  }

  option "env" {
    default     = {}
    description = "Environment variables for the subcommand"
    type        = map(string)
  }

  option "inter" {
    type        = bool
    description = "Interactive"
    short       = "i"
    default     = false
  }

  # Find Terraform binary to execute
  config "terraform-command" {
    source job {
      name = "terraform-command"
      args = {
        component   = param.component
        stack       = opt.stack
        command     = opt.command
      }
    }
  }

  variable "exec-cmd" {
    value = opt.dry-run ? "echo" : conf.terraform-command.command
    type  = string
  }

  variable "exec-args" {
    value = compact(concat(list(opt.dry-run ? conf.terraform-command.command : ""), list(opt.subcommand), opt.args))
  }

  exec {
    command     = var.exec-cmd
    args        = var.exec-args
    dir         = "${opt.terraform-dir}/${param.component}"
    env         = opt.env
    interactive = opt.inter
  }
}

job "terraform shell" {
  description = "Run terraform commands in a shell"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "commands" {
    description = "List of commands to execute"
    type        = list(string)
  }

  run "shell" {
    command = "bash"

    args = [
      "-c",
      join(" ", opt.commands)
    ]

    dir = "${opt.terraform-dir}/${param.component}"
  }
}

job "terraform write varfile" {
  description = "Write varfile for a component"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  config "stack-config" {
    source job {
      name = "stack config"
      args = {
        component-type = "terraform"
        config-type    = "vars"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }

  exec {
    command = "echo"

    args = [
      jsonencode(conf.stack-config)
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.terraform-dir}/${param.component}/${opt.stack}-${param.component}.terraform.tfvars.json"
  }
}

job "terraform provider override" {
  description = "Override aws provider"
  private     = true

  option "role" {
    type        = string
    description = "Role to assume"
  }

  exec {
    command = "echo"
    args = [
      <<-EOS
      provider:
        aws:
          - region: "${opt.region}"
            assume_role:
              role_arn: "${opt.role}"
      EOS
    ,
    ]
  }
}

job "terraform write override" {
  description = "Write override file for a component"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "role" {
    type        = string
    description = "Role to assume"
  }

  config "override-contents" {
    source job {
      name = "terraform provider override"
      args = {
        role = opt.role
      }
    }
  }

  exec {
    command = "echo"
    args = [
      jsonencode(conf.override-contents)
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.terraform-dir}/${param.component}/override.tf.json"
  }
}

# Find 'terraform' binary to execute.
# It could come from the config file 'command' attribute, or from the '--command=' command line argument.
# Otherwise, the default 'terraform' binary will be used (from the PATH)
job "terraform-command" {
  concurrency = 1
  description = "Find 'terraform' binary to execute"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "command" {
    default     = "terraform"
    type        = string
    description = "Command to execute, e.g. 'terraform', or path to the command, e.g. '/usr/local/terraform/0.13/bin/terraform'"
  }

  config "stack-config" {
    source job {
      name = "stack config"
      args = {
        component-type = "terraform"
        config-type    = "command"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }

  variable "command" {
    value = coalesce(lookup(conf.stack-config, "command", null), opt.command)
  }

  exec {
    command = "echo"
    args    = list("command: ${var.command}")
  }
}
