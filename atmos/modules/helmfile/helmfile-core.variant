#!/usr/bin/env variant
# vim: filetype=hcl

job "helmfile subcommand" {
  concurrency = 1
  description = "Run a helmfile subcommand"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "command" {
    default     = "helmfile"
    type        = string
    description = "Binary to execute, e.g. 'helmfile', or path to the binary, e.g. '/usr/local/bin/helmfile'"
  }

  option "subcommand" {
    description = "helmfile subcommand to run"
    type        = string
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "args" {
    default     = ""
    description = "A string of global arguments to supply to the helmfile command"
    type        = string
  }

  option "sub-args" {
    default     = ""
    description = "A string of arguments to supply to the helmfile subcommand"
    type        = string
  }

  option "env" {
    default     = {}
    description = "Environment variables for the helmfile subcommand"
    type        = map(string)
  }

  option "kube-namespace" {
    default     = ""
    description = "kube namespace"
    short       = "n"
    type        = string
  }

  config "stack-config" {
    source job {
      name = "stack config"
      args = {
        component-type = "helmfile"
        config-type    = "vars"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }

  # Find helmfile binary to execute
  config "helmfile-command" {
    source job {
      name = "helmfile-command"
      args = {
        component = param.component
        command   = opt.command
        stack     = opt.stack
      }
    }
  }

  config "config-component" {
    source job {
      name = "stack config"
      args = {
        component-type = "helmfile"
        config-type    = "component"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }

  variable "component" {
    value = coalesce(conf.config-component.component, param.component)
  }

  variable "kube-namespace-arg" {
    type = list(string)
    value = opt.kube-namespace != "" ? ["--namespace", opt.kube-namespace] : []
  }

  variable "args" {
    type  = list(string)
    value = compact(concat(
      var.kube-namespace-arg,
      split(" ", opt.args),
      [
        "--state-values-file",
        "./${opt.stack}.helmfile.vars.yaml",
        opt.subcommand
      ],
      split(" ", opt.sub-args)
    ))
  }

  variable "aws-profile" {
    value = {
      AWS_PROFILE = can(conf.stack-config.aws_profile) ? conf.stack-config.aws_profile : replace(replace(replace(
        opt.helm-aws-profile-pattern,
        "{environment}", try(conf.stack-config.environment, "")),
        "{stage}", try(conf.stack-config.stage, "")),
        "{namespace}", try(conf.stack-config.namespace, ""))
    }
  }

  step "helmfile kubeconfig" {
    run "aws eks kubeconfig" {
      stack  = opt.stack
    }
  }

  step "helmfile write varfile" {
    run "helmfile write varfile" {
      component = var.component
      stack     = opt.stack
    }
  }

  step "helmfile exec" {
    run "shell" {
      command = conf.helmfile-command.command
      args    = var.args
      dir     = "${opt.helmfile-dir}/${var.component}"
      env     = merge(
        opt.env,
        {
          KUBECONFIG  = "${opt.kubeconfig-path}/${opt.stack}-kubecfg",
          STACK       = opt.stack
          NAMESPACE   = try(conf.stack-config.namespace, ""),
          ENVIRONMENT = try(conf.stack-config.environment, ""),
          REGION      = try(conf.stack-config.region, ""),
          STAGE       = try(conf.stack-config.stage, "")
        },
        var.aws-profile
      )
    }
  }

  step "helmfile clean" {
    run "shell" {
      command = "rm"
      args    = ["${opt.helmfile-dir}/${var.component}/${opt.stack}.helmfile.vars.yaml"]
    }
  }
}

job "helmfile write varfile" {
  description = "Write varfile for a component in a stack"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  config "stack-config" {
    source job {
      name = "stack config"
      args = {
        component-type = "helmfile"
        config-type    = "vars"
        component      = param.component
        stack          = opt.stack
        format         = "yaml"
      }
    }
  }

  config "config-component" {
    source job {
      name = "stack config"
      args = {
        component-type = "helmfile"
        config-type    = "component"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }
  variable "component" {
    value = coalesce(conf.config-component.component, param.component)
  }

  exec {
    command = "echo"

    args = [
      yamlencode(conf.stack-config)
    ]
  }

  log {
    collect {
      condition = event.type == "exec"
      format    = event.exec.args[0]
    }

    file = "${opt.helmfile-dir}/${var.component}/${opt.stack}.helmfile.vars.yaml"
  }
}

# Find 'helmfile' binary to execute.
# It could come from the config file 'command' attribute, or from the '--command=' command line argument.
# Otherwise, the default 'helmfile' binary will be used (from the PATH)
job "helmfile-command" {
  concurrency = 1
  description = "Find 'helmfile' binary to execute"
  private     = true

  parameter "component" {
    type        = string
    description = "Component"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "command" {
    default     = "helmfile"
    type        = string
    description = "Command to execute, e.g. 'helmfile', or path to the command, e.g. '/usr/local/bin/helmfile'"
  }

  config "stack-config" {
    source job {
      name = "stack config"
      args = {
        component-type = "helmfile"
        config-type    = "command"
        component      = param.component
        stack          = opt.stack
        format         = "json"
      }
    }
  }

  variable "command" {
    value = coalesce(lookup(conf.stack-config, "command", null), opt.command)
  }

  exec {
    command = "echo"
    args    = list("command: ${var.command}")
  }
}
