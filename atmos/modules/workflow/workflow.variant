#!/usr/bin/env variant
# vim: filetype=hcl

job "workflow" {
  concurrency = 1
  description = "Run a workflow"

  parameter "workflow" {
    type        = string
    description = "Workflow to execute"
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  option "file" {
    type        = string
    description = "Workflow file. If not provided, the CLI will look for the workflow in the stack configuration file"
    short       = "f"
    default     = ""
  }

  config "env_config" {
    source file {
      path = format("%s/%s.yaml", opt.config-dir, (opt.file == "" ? "${opt.stack}" : opt.file))
    }
  }

  depends_on "echo" {
    args = {
      message = format("Executing workflow: %s", conf.env_config.workflows[param.workflow].description)
    }
  }

  depends_on "workflow exec" {
    items = conf.env_config.workflows[param.workflow].steps

    args = {
      job          = item.job
      job-args     = try(item.args, "")
      stack        = try(item.stack, opt.stack)
    }
  }
}

job "workflow exec" {
  concurrency = 1
  description = "Execute a workflow step"
  private     = true

  option "job" {
    description = "A config param to deploy in the format: [command] [subcommand] [component]; e.g. terraform deploy eks; helmfile deploy reloader"
    type        = string
  }

  option "job-args" {
    description = "Custom arguments to pass to the run"
    type        = string
    default     = ""
  }

  option "stack" {
    type        = string
    description = "Stack"
    short       = "s"
  }

  variable "job-split" {
    type  = list(string)
    value = compact(split(" ", opt.job))
  }

  variable "job-name" {
    type  = string
    value = format("%s %s", var.job-split[0], var.job-split[1])
  }

  variable "component" {
    type  = string
    value = var.job-split[length(var.job-split) - 1]
  }

  variable "echo-args" {
    value = {
      message = opt.job
    }
  }

  variable "job-args" {
    value = {
      component = var.component
      stack     = opt.stack
      args      = opt.job-args
    }
  }

  variable "subcommand" {
    type  = string
    value = opt.dry-run ? "echo" : var.job-name
  }

  variable "subcommand-args" {
    type  = map(string)
    value = opt.dry-run ? var.echo-args : var.job-args
  }

  depends_on "echo" {
    args = {
      message = trimspace(<<-EOS
      -----------------------------------------------------------------------------------------------------
      Executing: ${opt.job} --stack=${opt.stack}
      -----------------------------------------------------------------------------------------------------
      EOS
      )
    }
  }

  run {
    job  = var.subcommand
    with = var.subcommand-args
  }
}
