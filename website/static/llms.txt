# atmos

> Universal tool for DevOps and Cloud Automation

This file contains links to documentation sections following the llmstxt.org standard.

## Table of Contents

- [Best Practices](https://atmos.tools/docs/best-practices/best-practices): Learn the opinionated "Best Practices" for using Atmos
- [Component Best Practices](https://atmos.tools/docs/best-practices/components): Learn the opinionated "Best Practices" for using Components with Atmos
- [Stacks Best Practices](https://atmos.tools/docs/best-practices/stacks): Learn the opinionated "Best Practices" for using Stacks with Atmos
- [Terraform Best Practices with Atmos](https://atmos.tools/docs/best-practices/terraform): Learn the opinionated "Best Practices" for using Terraform with Atmos
- [CLI Commands Cheat Sheet](https://atmos.tools/docs/cheatsheets/commands): CLI Commands Cheat Sheet
- [Atmos Cheatsheet](https://atmos.tools/docs/cheatsheets/common): [Description not available]
- [Components Cheatsheet](https://atmos.tools/docs/cheatsheets/components): [Description not available]
- [Stacks Cheatsheet](https://atmos.tools/docs/cheatsheets/stacks): [Description not available]
- [Vendoring Cheatsheet](https://atmos.tools/docs/cheatsheets/vendoring): [Description not available]
- [Atmos CLI](https://atmos.tools/docs/cli/cli): This command starts an interactive UI to select an Atmos command, component and stack. Press "Enter" to execute the command
- [atmos atlantis generate repo-config](https://atmos.tools/docs/cli/commands/atlantis/atlantis-generate-repo-config): Use this command to generate a repository configuration for Atlantis.
- [atmos atlantis](https://atmos.tools/docs/cli/commands/atlantis/usage): Atmos Atlantis Commands
- [atmos aws eks update-kubeconfig](https://atmos.tools/docs/cli/commands/aws/aws-eks-update-kubeconfig): Use this command to download `kubeconfig` from an EKS cluster and saves it to a file.
- [atmos aws](https://atmos.tools/docs/cli/commands/aws/usage): Atmos AWS Commands
- [Atmos CLI Commands](https://atmos.tools/docs/cli/commands/commands): Atmos CLI Commands
- [atmos completion](https://atmos.tools/docs/cli/commands/completion): Use this command to generate completion scripts for `Bash`, `Zsh`, `Fish` and `PowerShell`.
- [atmos describe affected](https://atmos.tools/docs/cli/commands/describe/describe-affected): This command produces a list of the affected Atmos components and stacks given two Git commits.
- [atmos describe component](https://atmos.tools/docs/cli/commands/describe/describe-component): Use this command to describe the complete configuration for an Atmos component in an Atmos stack.
- [atmos describe config](https://atmos.tools/docs/cli/commands/describe/describe-config): Use this command to show the final (deep-merged) CLI configuration of all `atmos.yaml` file(s).
- [atmos describe dependents](https://atmos.tools/docs/cli/commands/describe/describe-dependents): This command produces a list of Atmos components in Atmos stacks that depend on the provided Atmos component.
- [atmos describe stacks](https://atmos.tools/docs/cli/commands/describe/describe-stacks): Use this command to show the fully deep-merged configuration for all stacks and the components in the stacks.
- [atmos describe workflows](https://atmos.tools/docs/cli/commands/describe/describe-workflows): Use this command to show all configured Atmos workflows.
- [atmos describe](https://atmos.tools/docs/cli/commands/describe/usage): Describe Atmos Configurations
- [atmos docs generate](https://atmos.tools/docs/cli/commands/docs/docs-generate): Generate documentation artifacts based on a named section under `docs.generate` in atmos.yaml
- [atmos docs](https://atmos.tools/docs/cli/commands/docs/usage): Use this command to open the Atmos docs
- [atmos helmfile generate varfile](https://atmos.tools/docs/cli/commands/helmfile/helmfile-generate-varfile): Use this command to generate a varfile for a `helmfile` component in a stack.
- [atmos helmfile](https://atmos.tools/docs/cli/commands/helmfile/usage): [Description not available]
- [atmos help](https://atmos.tools/docs/cli/commands/help): [Description not available]
- [atmos list components](https://atmos.tools/docs/cli/commands/list/list-components): Use this command to list Atmos components
- [atmos list metadata](https://atmos.tools/docs/cli/commands/list/list-metadata): The `atmos list metadata` command displays component metadata across all stacks.
- [atmos list settings](https://atmos.tools/docs/cli/commands/list/list-settings): The `atmos list settings` command displays component settings across all stacks.
- [atmos list stacks](https://atmos.tools/docs/cli/commands/list/list-stacks): Use this command to list all Stack configurations or a stack of a specified component.
- [atmos list values](https://atmos.tools/docs/cli/commands/list/list-values): The `atmos list values` command displays component values across all stacks where the component is used.
- [atmos list vars](https://atmos.tools/docs/cli/commands/list/list-vars): The `atmos list vars` command displays component variables across all stacks where the component is used.
- [atmos list workflows](https://atmos.tools/docs/cli/commands/list/list-workflows): The `atmos list workflows` command displays all Atmos workflows defined in your project.
- [atmos list](https://atmos.tools/docs/cli/commands/list/usage): List Atmos Stacks and Components
- [atmos packer build](https://atmos.tools/docs/cli/commands/packer/packer-build): [Description not available]
- [atmos packer init](https://atmos.tools/docs/cli/commands/packer/packer-init): [Description not available]
- [atmos packer inspect](https://atmos.tools/docs/cli/commands/packer/packer-inspect): [Description not available]
- [atmos packer output](https://atmos.tools/docs/cli/commands/packer/packer-output): [Description not available]
- [atmos packer validate](https://atmos.tools/docs/cli/commands/packer/packer-validate): [Description not available]
- [atmos packer version](https://atmos.tools/docs/cli/commands/packer/packer-version): [Description not available]
- [atmos packer](https://atmos.tools/docs/cli/commands/packer/usage): [Description not available]
- [atmos pro lock](https://atmos.tools/docs/cli/commands/pro/pro-lock): Use this command to lock a stack in Atmos Pro so that it cannot be planned or applied by another process (pull request, CI/CD, etc.)
- [atmos pro unlock](https://atmos.tools/docs/cli/commands/pro/pro-unlock): Use this command to unlock a stack in Atmos Pro that has previously been locked by the lock command.
- [atmos pro](https://atmos.tools/docs/cli/commands/pro/usage): Atmos Pro Commands
- [atmos terraform clean](https://atmos.tools/docs/cli/commands/terraform/terraform-clean): [Description not available]
- [atmos terraform deploy](https://atmos.tools/docs/cli/commands/terraform/terraform-deploy): [Description not available]
- [atmos terraform generate backend](https://atmos.tools/docs/cli/commands/terraform/terraform-generate-backend): Use this command to generate a Terraform backend config file for an Atmos terraform component in a stack.
- [atmos terraform generate backends](https://atmos.tools/docs/cli/commands/terraform/terraform-generate-backends): Use this command to generate the Terraform backend config files for all Atmos terraform components in all stacks.
- [atmos terraform generate planfile](https://atmos.tools/docs/cli/commands/terraform/terraform-generate-planfile): [Description not available]
- [atmos terraform generate varfile](https://atmos.tools/docs/cli/commands/terraform/terraform-generate-varfile): [Description not available]
- [atmos terraform generate varfiles](https://atmos.tools/docs/cli/commands/terraform/terraform-generate-varfiles): Use this command to generate the Terraform varfiles (`.tfvar`) for all Atmos terraform components in all stacks.
- [atmos terraform plan-diff](https://atmos.tools/docs/cli/commands/terraform/terraform-plan-diff): [Description not available]
- [atmos terraform shell](https://atmos.tools/docs/cli/commands/terraform/terraform-shell): This command starts a new `SHELL` configured with the environment for an Atmos component in a stack to allow execution of all native terraform comm...
- [atmos terraform workspace](https://atmos.tools/docs/cli/commands/terraform/terraform-workspace): This command calculates the `terraform` workspace for an Atmos component (from the context variables and stack config). It runs `terraform init -re...
- [atmos terraform](https://atmos.tools/docs/cli/commands/terraform/usage): [Description not available]
- [atmos validate](https://atmos.tools/docs/cli/commands/validate/usage): Validate Atmos Configurations
- [atmos validate component](https://atmos.tools/docs/cli/commands/validate/validate-component): Use this command to validate an Atmos component in a stack using JSON Schema and OPA policies.
- [atmos validate editorconfig](https://atmos.tools/docs/cli/commands/validate/validate-editorconfig): Use this command to validate the workdir of the Atmos project against the rules defined in the .editorconfig file.
- [atmos validate schema](https://atmos.tools/docs/cli/commands/validate/validate-schema): Use this command to validate the schema of yaml files of the Atmos project against the rules defined in the schema/manifest file.
- [atmos validate stacks](https://atmos.tools/docs/cli/commands/validate/validate-stacks): Use this command to validate all Stack configurations.
- [atmos vendor](https://atmos.tools/docs/cli/commands/vendor/usage): Vendor Atmos Components and Stacks
- [atmos vendor pull](https://atmos.tools/docs/cli/commands/vendor/vendor-pull): Use this command to pull sources and mixins from remote repositories for Terraform and Helmfile components and stacks.
- [atmos version](https://atmos.tools/docs/cli/commands/version): Use this command to get the Atmos CLI version
- [atmos workflow](https://atmos.tools/docs/cli/commands/workflow): Use this command to perform sequential execution of `atmos` and `shell` commands defined as workflow steps.
- [Customize Commands](https://atmos.tools/docs/cli/configuration/commands): Use the `atmos.yaml` to configure any custom commands you want to add to the Atmos CLI.
- [Customize Component Behavior](https://atmos.tools/docs/cli/configuration/components): Use the `atmos.yaml` configuration file to specify default behaviors for components, such as what command to use when running Terraform commands, t...
- [CLI Configuration](https://atmos.tools/docs/cli/configuration/configuration): Use the `atmos.yaml` configuration file to control the behavior of the Atmos CLI.
- [Markdown Styling](https://atmos.tools/docs/cli/configuration/markdown-styling): Configure custom markdown styling for Atmos CLI output
- [Customize Stack Behavior](https://atmos.tools/docs/cli/configuration/stacks): Use the `atmos.yaml` to configure where Atmos will discover stack configurations.
- [Terminal Settings](https://atmos.tools/docs/cli/configuration/terminal): Configure terminal output settings including syntax highlighting
- [Global Flags](https://atmos.tools/docs/cli/global-flags): Complete reference for all global command-line flags available in Atmos
- [Atmos Manifest JSON Schema](https://atmos.tools/docs/cli/schemas): Atmos Schemas
- [Telemetry](https://atmos.tools/docs/cli/telemetry): Collect Atmos usage telemetry
- [Atmos Versioning](https://atmos.tools/docs/cli/versioning): [Description not available]
- [Community](https://atmos.tools/docs/community/community): Community
- [Office Hours](https://atmos.tools/docs/community/office-hours): Office Hours with Cloud Posse
- [#atmos](https://atmos.tools/docs/community/slack): Cloud Posse's SweetOps Slack Community
- [Code of Conduct](https://atmos.tools/docs/contribute/coc): [Description not available]
- [Contributing](https://atmos.tools/docs/contribute/contributing): Contributing
- [How to Contribute](https://atmos.tools/docs/contribute/how-to-contribute): Thanks for the interest in contributing to the Atmos project!
- [Component Library](https://atmos.tools/docs/core-concepts/components/component-library): A component library is a collection of reusable building blocks.
- [Atmos Components](https://atmos.tools/docs/core-concepts/components/components): Components are opinionated building blocks of infrastructure as code that solve one specific problem or use-case.
- [Using Helmfiles](https://atmos.tools/docs/core-concepts/components/helmfile): [Description not available]
- [Terraform/OpenTofu Backends](https://atmos.tools/docs/core-concepts/components/terraform/backends): Configure Terraform/OpenTofu Backends.
- [Brownfield Considerations](https://atmos.tools/docs/core-concepts/components/terraform/brownfield): [Description not available]
- [Terraform Providers](https://atmos.tools/docs/core-concepts/components/terraform/providers): Configure and override Terraform Providers.
- [State Backend Configuration](https://atmos.tools/docs/core-concepts/components/terraform/state-backend): [Description not available]
- [Terraform Root Modules](https://atmos.tools/docs/core-concepts/components/terraform/terraform): Learn why Atmos can change how you think about the Terraform modules that you use to build your infrastructure.
- [Terraform Workspaces](https://atmos.tools/docs/core-concepts/components/terraform/workspaces): Terraform Workspaces.
- [Core Concepts of the Atmos Framework](https://atmos.tools/docs/core-concepts/core-concepts): Atmos Core Concepts
- [Atmos Custom Commands](https://atmos.tools/docs/core-concepts/custom-commands/custom-commands): [Description not available]
- [Deploy Components](https://atmos.tools/docs/core-concepts/deploy/deploy): Deploy components with a single command or in a CI/CD pipeline.
- [Describe Components](https://atmos.tools/docs/core-concepts/describe/components): Describe a component in a stack to view the fully deep-merged configuration
- [Describe Configuration](https://atmos.tools/docs/core-concepts/describe/describe): Describing your configuration so you understand what's happening.
- [Describe Stacks](https://atmos.tools/docs/core-concepts/describe/stacks): Describe stacks to view the fully deep-merged configuration
- [Configure Atmos CLI](https://atmos.tools/docs/core-concepts/projects/configuration/configuration): CLI configuration for Atmos to find your Terraform components and Atmos stacks
- [Configure Helmfile](https://atmos.tools/docs/core-concepts/projects/configuration/helmfile): [Description not available]
- [Configure OpenTofu](https://atmos.tools/docs/core-concepts/projects/configuration/opentofu): [Description not available]
- [Configure Packer](https://atmos.tools/docs/core-concepts/projects/configuration/packer): [Description not available]
- [Configure Stores](https://atmos.tools/docs/core-concepts/projects/configuration/stores): [Description not available]
- [Configure Terraform](https://atmos.tools/docs/core-concepts/projects/configuration/terraform): [Description not available]
- [Folder Structure](https://atmos.tools/docs/core-concepts/projects/layout): Recommended way to organize your Atmos stacks and components
- [Setup Projects for Atmos](https://atmos.tools/docs/core-concepts/projects/projects): [Description not available]
- [Configure Your Editor for Atmos](https://atmos.tools/docs/core-concepts/projects/setup-editor): [Description not available]
- [Using Remote State](https://atmos.tools/docs/core-concepts/share-data/remote-state): [Description not available]
- [Share Data Between Components](https://atmos.tools/docs/core-concepts/share-data/share-data): Share data between loosely-coupled components in Atmos
- [Stack Catalogs](https://atmos.tools/docs/core-concepts/stacks/catalogs): Organize Stack configurations into catalogs for easy imports.
- [Configuring Components in Stacks](https://atmos.tools/docs/core-concepts/stacks/define-components): [Description not available]
- [Configure Dependencies Between Components](https://atmos.tools/docs/core-concepts/stacks/dependencies): [Description not available]
- [Manage Lifecycle Events with Hooks](https://atmos.tools/docs/core-concepts/stacks/hooks): Use lifecycle hooks to take action at various points in the lifecycle of your components.
- [Import Stack Configurations](https://atmos.tools/docs/core-concepts/stacks/imports): [Description not available]
- [Inherit Configurations in Atmos Stacks](https://atmos.tools/docs/core-concepts/stacks/inheritance/inheritance): [Description not available]
- [Stack Mixins](https://atmos.tools/docs/core-concepts/stacks/inheritance/mixins): [Description not available]
- [Override Configurations](https://atmos.tools/docs/core-concepts/stacks/overrides): Use the 'Component Overrides' pattern to modify components' configuration and behavior in the current scope.
- [Atmos Stacks](https://atmos.tools/docs/core-concepts/stacks/stacks): Use Stacks to configure Components for an environment
- [Template Data Sources](https://atmos.tools/docs/core-concepts/stacks/templates/datasources): [Description not available]
- [Stack Manifest Templating](https://atmos.tools/docs/core-concepts/stacks/templates/templates): [Description not available]
- [EditorConfig Validation](https://atmos.tools/docs/core-concepts/validate/editorconfig): Use EditorConfig Checker to validate your configurations.
- [JSON Schema Validation](https://atmos.tools/docs/core-concepts/validate/json-schema): Use JSON Schema policies to validate Stacks and Component configurations.
- [Open Policy Agent (OPA) Validation](https://atmos.tools/docs/core-concepts/validate/opa): Use OPA policies to validate Stacks and Component configurations.
- [Terraform Input Variables Validation](https://atmos.tools/docs/core-concepts/validate/terraform-variables): Use OPA policies to validate Terraform input variables.
- [Validating Stack Configurations](https://atmos.tools/docs/core-concepts/validate/validate): Use JSON Schema, OPA policies, and EditorConfig Checker to validate Components.
- [Component Manifest](https://atmos.tools/docs/core-concepts/vendor/components-manifest): Use Component manifests to make copies of 3rd-party components in your own repo.
- [Vendor Manifest](https://atmos.tools/docs/core-concepts/vendor/vendor-manifest): Use Atmos vendoring to make copies of 3rd-party components, stacks, and other artifacts in your own repo.
- [Vendoring](https://atmos.tools/docs/core-concepts/vendor/vendor): Use Atmos vendoring to make copies of 3rd-party components, stacks, and other artifacts in your own repo.
- [Workflows](https://atmos.tools/docs/core-concepts/workflows/workflows): [Description not available]
- [Abstract Component](https://atmos.tools/docs/design-patterns/abstract-component): Abstract Component Atmos Design Pattern
- [Component Catalog Template](https://atmos.tools/docs/design-patterns/component-catalog-template): Component Catalog Template Atmos Design Pattern
- [Component Catalog with Mixins](https://atmos.tools/docs/design-patterns/component-catalog-with-mixins): Component Catalog with Mixins Atmos Design Pattern
- [Component Catalog](https://atmos.tools/docs/design-patterns/component-catalog): Component Catalog Atmos Design Pattern
- [Component Inheritance](https://atmos.tools/docs/design-patterns/component-inheritance): Component Inheritance Atmos Design Pattern
- [Component Overrides](https://atmos.tools/docs/design-patterns/component-overrides): Component Overrides Atmos Design Pattern
- [The _defaults.yaml Design Pattern](https://atmos.tools/docs/design-patterns/defaults-pattern): A naming convention for organizing hierarchical configuration defaults in Atmos
- [Atmos Design Patterns](https://atmos.tools/docs/design-patterns/design-patterns): Techniques of Reusable Infrastructure Configuration
- [Inline Component Configuration](https://atmos.tools/docs/design-patterns/inline-component-configuration): Inline Component Configuration Atmos Design Pattern
- [Inline Component Customization](https://atmos.tools/docs/design-patterns/inline-component-customization): Inline Component Customization Atmos Design Pattern
- [Layered Stack Configuration](https://atmos.tools/docs/design-patterns/layered-stack-configuration): Layered Stack Configuration Atmos Design Pattern
- [Multiple Component Instances](https://atmos.tools/docs/design-patterns/multiple-component-instances): Multiple Component Instances Atmos Design Pattern
- [Organizational Structure Configuration](https://atmos.tools/docs/design-patterns/organizational-structure-configuration): Organizational Structure Configuration Atmos Design Pattern
- [Partial Component Configuration](https://atmos.tools/docs/design-patterns/partial-component-configuration): Partial Component Configuration Atmos Design Pattern
- [Partial Stack Configuration](https://atmos.tools/docs/design-patterns/partial-stack-configuration): Partial Stack Configuration Atmos Design Pattern
- [Summary](https://atmos.tools/docs/design-patterns/summary): Summary
- [Atmos Functions](https://atmos.tools/docs/functions): Atmos Functions
- [atmos.Component](https://atmos.tools/docs/functions/template/atmos.Component): Read the remote state or configuration of any Atmos component
- [atmos.GomplateDatasource](https://atmos.tools/docs/functions/template/atmos.GomplateDatasource): Fetch external data from APIs, files, or cloud services with automatic caching
- [atmos.Store](https://atmos.tools/docs/functions/template/atmos.Store): Read a value from a store
- [Atmos Template Functions](https://atmos.tools/docs/functions/template): Atmos functions for the Go's template language.
- [!env](https://atmos.tools/docs/functions/yaml/env): Retrieve environment variables and assign them to the sections in Atmos stack manifests
- [!exec](https://atmos.tools/docs/functions/yaml/exec): Execute shell scripts and assign the results to the sections in Atmos stack manifests
- [!include](https://atmos.tools/docs/functions/yaml/include): Download local or remote files from different sources, and insert their contents or specific values directly into sections of your stack manifests
- [!include.raw](https://atmos.tools/docs/functions/yaml/include.raw): Force inclusion of files as raw strings regardless of their extension or content
- [Atmos YAML Functions](https://atmos.tools/docs/functions/yaml): [Description not available]
- [!repo-root](https://atmos.tools/docs/functions/yaml/repo-root): Get the root directory of the Atmos repository
- [!store.get](https://atmos.tools/docs/functions/yaml/store.get): Retrieve arbitrary keys directly from a store
- [!store](https://atmos.tools/docs/functions/yaml/store): Read a value from a store for an Atmos component in a stack
- [!template](https://atmos.tools/docs/functions/yaml/template): Handle outputs containing maps or lists returned from the atmos.Component template function
- [!terraform.output](https://atmos.tools/docs/functions/yaml/terraform.output): Read the remote state of any Atmos component from Terraform/OpenTofu outputs
- [!terraform.state](https://atmos.tools/docs/functions/yaml/terraform.state): The FASTEST way to retrieve Terraform outputs - reads directly from state backends without initializing Terraform or downloading providers
- [Abstract Component](https://atmos.tools/docs/glossary/abstract-component): An *Abstract Component* is a component baseline required to be inherited by a *Real Component* in order to be instantiated.
- [Catalog](https://atmos.tools/docs/glossary/catalog): A *Catalog* is a collection of reusable configurations, such as Stack configurations.
- [Component Instance](https://atmos.tools/docs/glossary/component-instance): A *Component Instance* is a configuration of a real component in a parent stack that can be instantiated, such as deployed.
- [Component](https://atmos.tools/docs/glossary/component): *Components* are reusable building blocks of some tool, such as terraform "root" modules.
- [Concrete Component](https://atmos.tools/docs/glossary/concrete-component): Also known as a *Real Component*.
- [Environment](https://atmos.tools/docs/glossary/environment): An *Environment* is a location where resources are deployed, such as `us-east-1`.
- [Programming Framework](https://atmos.tools/docs/glossary/framework): Think of a programming framework like a toolkit or a set of building blocks for creating software. Just like how a carpenter uses specific tools an...
- [Imports](https://atmos.tools/docs/glossary/imports): *Imports* are a mechanism to include one configuration in another for the purpose of reducing duplication.
- [Glossary](https://atmos.tools/docs/glossary): Here's a list of the terms, concepts and conventions used throughout the Atmos project.
- [Inheritance](https://atmos.tools/docs/glossary/inheritance): *Inheritance* is a mechanism to derive a configuration from a hierarchy of other configurations that share a set of attributes.
- [Integration](https://atmos.tools/docs/glossary/integration): An *Integration* is a mechanism of working with other tools and APIs.
- [Kubernetes Namespace](https://atmos.tools/docs/glossary/kubernetes-namespace): Frequently it will be represented by a variable named `kubernetes_namespace`; it should not be confused with what Atmos calls namespace.
- [Library](https://atmos.tools/docs/glossary/library): A *Library* is a collection of "Components" that can be treated like reusable building blocks.
- [Mixins](https://atmos.tools/docs/glossary/mixins): *Mixins* are a partial configuration that is imported for use by other stacks without having to be the parent stack.
- [Multiple Inheritance](https://atmos.tools/docs/glossary/multiple-inheritance): *Multiple Inheritance* is a mechanism to inherit configurations from multiple sources.
- [Namespace](https://atmos.tools/docs/glossary/namespace): A *Namespace* is a prefix for all resources in a Stack.
- [Parent Stack](https://atmos.tools/docs/glossary/parent-stack): The *Parent Stack* configuration defines all components for an environment.
- [Real Component](https://atmos.tools/docs/glossary/real-component): A *Real Component* is a component that is instantiated in a Parent Stack.
- [Spacelift Stack](https://atmos.tools/docs/glossary/spacelift-stack): A Spacelift Stack is a Terraform root module. Atmos on the other hand treats a stack as a collection of Terraform root modules.
- [Stack Manifest](https://atmos.tools/docs/glossary/stack-manifest): Stack manifests are YAML files in which the configuration for all Atmos stacks and components are defined.
- [Stack](https://atmos.tools/docs/glossary/stack): An Atmos Stack serves as a configuration blueprint that describes a cohesive collection of components, automating the deployment, management,
- [Stage](https://atmos.tools/docs/glossary/stage): Atmos defines "Stage" as a classification for different lifecycles in infrastructure management, such as Development, Production, Staging, QA, etc....
- [Tenant](https://atmos.tools/docs/glossary/tenant): A *Tenant* is a logical grouping of resources. In AWS, we use the Tenant to represent the Organizational Unit (OU).
- [Terraform "Child Module"](https://atmos.tools/docs/glossary/terraform-child-module): Any Terraform module that is invoked by another module, distinguishing itself by not maintaining a separate Terraform state.
- [Terralith](https://atmos.tools/docs/glossary/terralith): A monolithic Terraform "root module" is also known as a Terralith. It's characterized by an expansive, all-encompassing Terraform configuration tha...
- [Vendoring](https://atmos.tools/docs/glossary/vendoring): *Vendoring* is a mechanism of making a copy of 3rd-party components within your repository.
- [Atlantis Integration](https://atmos.tools/docs/integrations/atlantis): [Description not available]
- [Affected Stacks](https://atmos.tools/docs/integrations/github-actions/affected-stacks): Identify the affected stacks and components in a pull request
- [Atmos Terraform Apply](https://atmos.tools/docs/integrations/github-actions/atmos-terraform-apply): Run a `terraform apply` to provision changes
- [Atmos Terraform Drift Detection](https://atmos.tools/docs/integrations/github-actions/atmos-terraform-drift-detection): Identify drift and create GitHub Issues for remediation
- [Atmos Terraform Drift Remediation](https://atmos.tools/docs/integrations/github-actions/atmos-terraform-drift-remediation): Remediate Terraform drift using IssueOps
- [Atmos Terraform Plan](https://atmos.tools/docs/integrations/github-actions/atmos-terraform-plan): Run a `terraform plan` to understand the impact of changes
- [Component Updater](https://atmos.tools/docs/integrations/github-actions/component-updater): Easily update your vendored components with Pull Requests
- [GitHub Actions](https://atmos.tools/docs/integrations/github-actions/github-actions): Use GitHub Actions with Atmos
- [Setup Atmos](https://atmos.tools/docs/integrations/github-actions/setup-atmos): Install Atmos in your GitHub Action workflows
- [Infrastructure CI/CD (GitOps)](https://atmos.tools/docs/integrations/integrations): Natively supported CI/CD integrations in Atmos
- [Spacelift Integration](https://atmos.tools/docs/integrations/spacelift): [Description not available]
- [Atmos FAQ](https://atmos.tools/docs/introduction/faq): [Description not available]
- [Atmos Features](https://atmos.tools/docs/introduction/features): [Description not available]
- [Getting Started with Atmos](https://atmos.tools/docs/introduction): Atmos is a Component Oriented Framework and Orchestration Tool for DevOps that makes it easy to automate Terraform Environments and manage complex ...
- [Atmos Use-Cases](https://atmos.tools/docs/introduction/use-cases): [Description not available]
- [Nirvana 💫](https://atmos.tools/docs/introduction/why-atmos/nirvana): Teams who adopt Atmos have total clarity of their infrastructure.
- [Stage 0: ClickOps](https://atmos.tools/docs/introduction/why-atmos/stage-0): All infrastructure is manually provisioned using web interfaces.
- [Stage 1: Introduction to Terraform](https://atmos.tools/docs/introduction/why-atmos/stage-1): Exploration into Terraform begins with a simple example.
- [Stage 10: Terraform Bankruptcy 💥](https://atmos.tools/docs/introduction/why-atmos/stage-10): Teams start looking for alternatives out of frustration.
- [Stage 2: The Monolithic Root Module](https://atmos.tools/docs/introduction/why-atmos/stage-2): Terraform code expands into a monolithic root module.
- [Stage 3: Move Towards Modularization](https://atmos.tools/docs/introduction/why-atmos/stage-3): In-house modules are created to avoid code duplication.
- [Stage 4: Adoption of Open Source Modules](https://atmos.tools/docs/introduction/why-atmos/stage-4): Open Source modules replace in-house modules.
- [Stage 5: Refactor Root Modules](https://atmos.tools/docs/introduction/why-atmos/stage-5): Root modules are refactored into smaller, more manageable units.
- [Stage 6: Optimize for DRY Configuration](https://atmos.tools/docs/introduction/why-atmos/stage-6): Configuration management moves to `.tfvar` files.
- [Stage 7: Terraform Scripting](https://atmos.tools/docs/introduction/why-atmos/stage-7): Scripts automate terraform to make it easier.
- [Stage 8: Team Challenges](https://atmos.tools/docs/introduction/why-atmos/stage-8): Team expands and begins to struggle with Terraform
- [Stage 9: DIY CI/CD with Terraform](https://atmos.tools/docs/introduction/why-atmos/stage-9): Terraform is deployed with a CI/CD pipeline
- [Why Does Atmos Exist?](https://atmos.tools/docs/introduction/why-atmos/why-atmos): Learn about the typical Terraform journey when not using Atmos.
- [Add Custom Commands](https://atmos.tools/docs/quick-start/advanced/add-custom-commands): [Description not available]
- [Advanced Tutorial](https://atmos.tools/docs/quick-start/advanced/advanced): Take 30 minutes to learn the most important Atmos concepts.
- [Configure Atmos CLI](https://atmos.tools/docs/quick-start/advanced/configure-cli): [Description not available]
- [Configure Project Repository](https://atmos.tools/docs/quick-start/advanced/configure-repository): Atmos supports both the [monorepo and polyrepo architectures](https://en.wikipedia.org/wiki/Monorepo) when managing the configurations for components
- [Configure Terraform Backend](https://atmos.tools/docs/quick-start/advanced/configure-terraform-backend): [Description not available]
- [Validate Configurations](https://atmos.tools/docs/quick-start/advanced/configure-validation): Atmos supports [Stack Schema Validation](/cli/schemas) and [Custom Policy Validation](/core-concepts/validate)
- [Create Atmos Stacks](https://atmos.tools/docs/quick-start/advanced/create-atmos-stacks): [Description not available]
- [Automate Common Workflows](https://atmos.tools/docs/quick-start/advanced/create-workflows): [Description not available]
- [Final Notes](https://atmos.tools/docs/quick-start/advanced/final-notes): Atmos provides unlimited flexibility in defining and configuring stacks and components in the stacks.
- [Next Steps](https://atmos.tools/docs/quick-start/advanced/next-steps): You have just learned the **essentials of Atmos**.
- [Provision](https://atmos.tools/docs/quick-start/advanced/provision): Having configured the Terraform components, the Atmos components catalog, all the mixins and defaults, and the Atmos top-level stacks, we can now
- [Vendor Components](https://atmos.tools/docs/quick-start/advanced/vendor-components): [Description not available]
- [Install Atmos](https://atmos.tools/docs/quick-start/install-atmos): [Description not available]
- [Quick Start Introduction](https://atmos.tools/docs/quick-start/introduction): [Description not available]
- [Thinking Like Atmos](https://atmos.tools/docs/quick-start/mindset): [Description not available]
- [Configure Atmos CLI](https://atmos.tools/docs/quick-start/simple/configure-cli): [Description not available]
- [Start Your Project](https://atmos.tools/docs/quick-start/simple/configure-project): [Description not available]
- [Use Your Component in a Stack](https://atmos.tools/docs/quick-start/simple/configure-stacks): [Description not available]
- [Deploy Another App](https://atmos.tools/docs/quick-start/simple/extra-credit/add-another-component): Provision multiple components in the same stack
- [Add Custom Commands](https://atmos.tools/docs/quick-start/simple/extra-credit/add-custom-commands): Extend Atmos with your own custom CLI commands
- [Automate Common Workflows](https://atmos.tools/docs/quick-start/simple/extra-credit/create-workflows): Automate your repetitive tasks with workflows
- [Extra Credit!](https://atmos.tools/docs/quick-start/simple/extra-credit/extra-credit): [Description not available]
- [Vendor Dependencies](https://atmos.tools/docs/quick-start/simple/extra-credit/vendor-components): Learn how to vendor components from remote sources
- [Deploy Everything](https://atmos.tools/docs/quick-start/simple/provision): [Description not available]
- [Simple Atmos Tutorial](https://atmos.tools/docs/quick-start/simple/simple): Take 30 minutes to learn the most important Atmos concepts.
- [Where to go from here...](https://atmos.tools/docs/quick-start/simple/summary): [Description not available]
- [Write Some Components](https://atmos.tools/docs/quick-start/simple/write-components): [Description not available]
- [Atmos Alternatives & Inspirations](https://atmos.tools/docs/reference/alternatives): [Description not available]
- [Reference](https://atmos.tools/docs/reference/reference): Reference
- [Slides](https://atmos.tools/docs/reference/slides): [Description not available]
- [Debugging](https://atmos.tools/docs/troubleshoot/debugging): :::note
- [Common Errors](https://atmos.tools/docs/troubleshoot/errors): * Running out of date version of `atmos` with newer configuration parameters
- [Performance Profiling](https://atmos.tools/docs/troubleshoot/profiling): Use pprof to analyze Atmos performance and identify bottlenecks.
- [Atmos component migration in YAML config](https://atmos.tools/docs/tutorials/atmos-component-migrations-in-yaml): Learn how to migrate an Atmos component to a new name or to use the `metadata.inheritance`.
- [Atmos Example Infrastructure](https://atmos.tools/docs/tutorials/atmos-example-infra): Learn about the Example Infrastructure that Atmos shows how to configure and provision
- [Getting Started with Atmos](https://atmos.tools/docs/tutorials/atmos-getting-started): Learn what Atmos is and how you can start using it with stacks to simplify your DevOps Automation tasks.
- [Your First Environment on AWS](https://atmos.tools/docs/tutorials/first-aws-environment): Get your first AWS environment deployed using Atmos, Stacks, and Vendoring
- [Tutorials](https://atmos.tools/docs/tutorials/tutorials): Here are some lessons on how to implement Atmos in a project.
- [Welcome to Atmos](https://atmos.tools/blog)
