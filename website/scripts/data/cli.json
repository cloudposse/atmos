{
  "type": "global",
  "name": "atmos",
  "summary": "",
  "description": "",
  "groups": [],
  "commands": [
    {
      "name": "atmos help",
      "namespace": [
        "atmos"
      ],
      "summary": "Show help for all `atmos` commands",
      "description": "`atmos help` shows help for all `atmos` CLI commands.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos help",
        "atmos aws --help         # Execute 'aws' commands",
        "atmos describe --help    # Execute 'describe' commands",
        "atmos helmfile --help    # Execute 'helmfile' commands",
        "atmos terraform --help   # Execute 'terraform' commands",
        "atmos validate --help    # Execute 'validate' commands",
        "atmos vendor --help      # Execute 'vendor' commands",
        "atmos workflow --help    # Execute 'workflow' commands"
      ],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "atmos version",
      "namespace": [
        "atmos"
      ],
      "summary": "Show `atmos` version",
      "description": "`atmos version` shows CLI version.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos version"
      ],
      "aliases": [],
      "inputs": [],
      "options": [],
      "type": "global"
    },
    {
      "name": "atmos aws eks update-kubeconfig",
      "namespace": [
        "atmos",
        "aws",
        "eks"
      ],
      "summary": "Execute `aws eks update-kubeconfig` command",
      "description": [
        "This command executes `aws eks update-kubeconfig` command to download `kubeconfig` from an EKS cluster and save it to a file.",
        "\n\nThe command can execute `aws eks update-kubeconfig` in three different ways:",
        "\n\n1. If all the required parameters (cluster name and AWS profile/role) are provided on the command-line, then `atmos` executes the command without requiring the `atmos` CLI config and context.",
        "\n\n  For example: `atmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name>`",
        "\n\n2. If `component` and `stack` are provided on the command-line, then `atmos` executes the command using the `atmos` CLI config and stack's context by searching for the following settings:",
        "\n   - `components.helmfile.cluster_name_pattern` in the `atmos.yaml` CLI config (and calculates the `--name` parameter using the pattern)",
        "\n   - `components.helmfile.helm_aws_profile_pattern` in the `atmos.yaml` CLI config (and calculates the `--profile` parameter using the pattern)",
        "\n   - `components.helmfile.kubeconfig_path` in the `atmos.yaml` CLI config",
        "\n   - the variables for the component in the provided stack",
        "\n   - `region` from the variables for the component in the stack",
        "\n\n  For example: `atmos aws eks update-kubeconfig <component> -s <stack>`",
        "\n\n3. Combination of the above. Provide a component and a stack, and override other parameters on the command line.",
        "\n\n  For example: `atmos aws eks update-kubeconfig <component> -s <stack> --kubeconfig=<path_to_kubeconfig> --region=<region>`",
        "\n\nSee https://docs.aws.amazon.com/cli/latest/reference/eks/update-kubeconfig.html for more information."
      ],
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos aws eks update-kubeconfig <component> -s <stack>",
        "atmos aws eks update-kubeconfig --profile=<profile> --name=<cluster_name>",
        "atmos aws eks update-kubeconfig <component> -s <stack> --kubeconfig=<path_to_kubeconfig> --region=<region>",
        "atmos aws eks update-kubeconfig --role-arn <ARN>",
        "atmos aws eks update-kubeconfig --alias <cluster context name alias>",
        "atmos aws eks update-kubeconfig --dry-run=true",
        "atmos aws eks update-kubeconfig --verbose=true"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "Component to get `kubeconfig` for",
          "required": false
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack name",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        },
        {
          "name": "profile",
          "type": "string",
          "summary": "AWS profile to use to authenticate to the EKS cluster",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "profile"
          }
        },
        {
          "name": "role-arn",
          "type": "string",
          "summary": "AWS IAM role ARN to use to authenticate to the EKS cluster",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "ARN"
          }
        },
        {
          "name": "name",
          "type": "string",
          "summary": "EKS cluster name",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "name"
          }
        },
        {
          "name": "region",
          "type": "string",
          "summary": "AWS region",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "region"
          }
        },
        {
          "name": "kubeconfig",
          "type": "string",
          "summary": "A `kubeconfig` filename to append with the configuration",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "filename"
          }
        },
        {
          "name": "alias",
          "type": "string",
          "summary": "Alias for the cluster context name. Defaults to match cluster ARN",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "alias"
          }
        },
        {
          "name": "dry-run",
          "type": "boolean",
          "summary": "Print the merged kubeconfig to stdout instead of writing it to the specified file",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        },
        {
          "name": "verbose",
          "type": "boolean",
          "summary": "Print more detailed output when writing to the kubeconfig file, including the appended entries",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "true/false"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos describe config",
      "namespace": [
        "atmos",
        "describe"
      ],
      "summary": "Execute `describe config` command",
      "description": "This command shows the final (deep-merged) CLI configuration.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos describe config",
        "atmos describe config -f json",
        "atmos describe config --format yaml"
      ],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "format",
          "type": "string",
          "summary": "Output format (`json` or `yaml`)",
          "groups": [],
          "aliases": [
            "f"
          ],
          "spec": {
            "value": "json/yaml"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos describe component",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `describe component` command",
      "description": "This command shows configuration for a component in a stack.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos describe component infra/vpc -s tenant1-ue2-dev",
        "atmos describe component echo-server -s tenant1-ue2-staging",
        "atmos describe component test/test-component-override -s tenant2-ue2-prod"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "Component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos describe stacks",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `describe stacks` command",
      "description": "This command shows configuration for stacks and components in the stacks.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos describe stacks",
        "atmos describe stacks -s tenant1-ue2-dev",
        "atmos describe stacks --file=stacks.yaml",
        "atmos describe stacks --file=stacks.json --format=json",
        "atmos describe stacks --components=infra/vpc",
        "atmos describe stacks --components=echo-server,infra/vpc",
        "atmos describe stacks --components=echo-server,infra/vpc --sections=none",
        "atmos describe stacks --components=echo-server,infra/vpc --sections=none",
        "atmos describe stacks --components=none --sections=metadata",
        "atmos describe stacks --components=echo-server,infra/vpc --sections=vars,settings,metadata",
        "atmos describe stacks --components=test/test-component-override-3 --sections=vars,settings,component,deps,inheritance --file=stacks.yaml",
        "atmos describe stacks --components=test/test-component-override-3 --sections=vars,settings --format=json --file=stacks.json",
        "atmos describe stacks --components=test/test-component-override-3 --sections=deps,vars -s=tenant2-ue2-staging"
      ],
      "aliases": [],
      "inputs": [],
      "options": [
        {
          "name": "format",
          "type": "string",
          "summary": "Output format (`yaml` or `json`)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "format"
          }
        },
        {
          "name": "file",
          "type": "string",
          "summary": "Write the result to a file",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "file"
          }
        },
        {
          "name": "stack",
          "type": "string",
          "summary": "Filter by a specific stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        },
        {
          "name": "components",
          "type": "string",
          "summary": "Filter by specific components",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "components"
          }
        },
        {
          "name": "component-types",
          "type": "string",
          "summary": "Filter by specific component types (terraform or helmfile)",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "component-types"
          }
        },
        {
          "name": "sections",
          "type": "string",
          "summary": "Output only the specified component sections. Available sections: backend, backend_type, deps, env, inheritance, metadata, remote_state_backend, remote_state_backend_type, settings, vars",
          "groups": [],
          "aliases": [],
          "spec": {
            "value": "sections"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos helmfile",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `helmfile` commands",
      "description": "This command executes `helmfile` commands. Supports the commands and options described in https://github.com/helmfile/helmfile#cli-reference",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos helmfile diff echo-server -s tenant1-ue2-dev",
        "atmos helmfile apply echo-server -s tenant1-ue2-dev",
        "atmos helmfile sync echo-server --stack tenant1-ue2-dev",
        "atmos helmfile destroy echo-server --stack=tenant1-ue2-dev"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`helmfile` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos helmfile generate varfile",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `helmfile generate varfile` command",
      "description": "This command generates a varfile for a `helmfile` component.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos helmfile generate varfile echo-server -s tenant1-ue2-dev",
        "atmos helmfile generate varfile echo-server -s tenant1-ue2-dev",
        "atmos helmfile generate varfile echo-server -s tenant1-ue2-dev -f vars.yaml",
        "atmos helmfile generate varfile echo-server --stack tenant1-ue2-dev --file=vars.yaml"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`helmfile` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        },
        {
          "name": "file",
          "type": "string",
          "summary": "File name to write the varfile to",
          "groups": [],
          "aliases": [
            "f"
          ],
          "spec": {
            "value": "file"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos terraform",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `terraform` commands",
      "description": "This command executes `terraform` commands. Supports the commands and options described in https://www.terraform.io/cli/commands",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos terraform plan test/test-component-override-3 -s tenant1-ue2-dev",
        "atmos terraform apply test/test-component-override-3 -s tenant1-ue2-dev",
        "atmos terraform destroy test/test-component-override-3 -s tenant1-ue2-dev",
        "atmos terraform init test/test-component-override-3 -s tenant1-ue2-dev",
        "atmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`terraform` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos terraform generate backend",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `terraform generate backend` command",
      "description": "This command generates a backend config for a `terraform` component.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos terraform generate backend top-level-component1 -s tenant1-ue2-dev",
        "atmos terraform generate backend infra/vpc -s tenant1-ue2-staging",
        "atmos terraform generate backend test/test-component -s tenant1-ue2-dev",
        "atmos terraform generate backend test/test-component-override-2 -s tenant2-ue2-prod"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`terraform` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos terraform generate varfile",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `terraform generate varfile` command",
      "description": "This command generates a varfile for a `terraform` component.",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos terraform generate varfile top-level-component1 -s tenant1-ue2-dev",
        "atmos terraform generate varfile infra/vpc -s tenant1-ue2-staging",
        "atmos terraform generate varfile test/test-component -s tenant1-ue2-dev",
        "atmos terraform generate varfile test/test-component-override-2 -s tenant2-ue2-prod",
        "atmos terraform generate varfile test/test-component-override-3 -s tenant1-ue2-dev -f vars.json"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`terraform` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        },
        {
          "name": "file",
          "type": "string",
          "summary": "File name to write the varfile to",
          "groups": [],
          "aliases": [
            "f"
          ],
          "spec": {
            "value": "file"
          }
        }
      ],
      "type": "global"
    },
    {
      "name": "atmos terraform workspace",
      "namespace": [
        "atmos"
      ],
      "summary": "Execute `terraform workspace` command",
      "description": "This command selects a Terraform workspace for a component. If the workspace does not exist, the command creates it",
      "footnotes": [],
      "groups": [],
      "exampleCommands": [
        "atmos terraform workspace top-level-component1 -s tenant1-ue2-dev",
        "atmos terraform workspace infra/vpc -s tenant1-ue2-staging",
        "atmos terraform workspace test/test-component -s tenant1-ue2-dev",
        "atmos terraform workspace test/test-component-override-2 -s tenant2-ue2-prod",
        "atmos terraform workspace test/test-component-override-3 -s tenant1-ue2-dev"
      ],
      "aliases": [],
      "inputs": [
        {
          "name": "component",
          "summary": "`terraform` component",
          "required": true
        }
      ],
      "options": [
        {
          "name": "stack",
          "type": "string",
          "summary": "Stack",
          "groups": [],
          "aliases": [
            "s"
          ],
          "spec": {
            "value": "stack"
          }
        }
      ],
      "type": "global"
    }
  ],
  "aliases": []
}
