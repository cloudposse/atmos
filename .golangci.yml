# golangci-lint v2 configuration
# This config is used by both standard golangci-lint and custom builds with plugins.
#
# Custom Linters (Module Plugins):
# - Custom linters are defined in .custom-gcl.yml and built into a custom binary
# - The custom binary (custom-gcl) contains ALL standard linters + custom plugins
# - Enable custom linters here in the 'enable' list (e.g., 'lintroller')
# - Configure custom linters in 'settings.custom.<linter-name>' section below
#
# To add a new custom linter:
# 1. Add plugin to .custom-gcl.yml
# 2. Run `golangci-lint custom` to build custom-gcl binary
# 3. Enable the linter in the 'enable' list below
# 4. Configure it in 'settings.custom.<linter-name>' section
#
# References:
# - Configuration docs: https://golangci-lint.run/docs/linters/configuration/
# - Module plugins: https://golangci-lint.run/docs/plugins/module-plugins/

version: "2"
run:
  tests: true
linters:
  enable:
    - bodyclose
    - cyclop
    - dogsled
    - dupl
    - err113
    - forbidigo
    - funlen
    - gocognit
    - gocritic
    - godot
    - gosec
    - importas
    - lintroller  # Custom plugin: Atmos-specific test rules (see settings.custom.lintroller)
    - loggercheck
    - misspell
    - nestif
    - nilerr
    - nolintlint
    - revive
    - rowserrcheck
    - tparallel
    - unconvert
    - unparam
    - unused
    - whitespace
  settings:
    cyclop:
      max-complexity: 15
    dogsled:
      max-blank-identifiers: 3
    dupl:
      threshold: 150
    forbidigo:
      forbid:
        - pattern: os\.Getenv
          msg: Use `viper.BindEnv` for new environment variables instead of `os.Getenv`
        - pattern: '\.(Skip|SkipNow)\('
          msg: Use `t.Skipf("<reason>")` with a descriptive reason; do not use `t.Skip`/`t.SkipNow`
        - pattern: ^path\.Join$
          msg: Use `filepath.Join` for OS-appropriate path separators instead of `path.Join` (which always uses forward slashes)
        - pattern: term\.IsTerminal\(
          msg: Use `term.IsTTYSupportForStdout()`, `term.IsTTYSupportForStderr()`, or `term.IsTTYSupportForStdin()` instead of `term.IsTerminal()` for consistent and mockable TTY detection
      exclude-godoc-examples: false
      analyze-types: true
    funlen:
      lines: 60
      statements: 40
      ignore-comments: true
    gocognit:
      min-complexity: 20
    gocritic:
      enabled-checks:
        - rangeValCopy
        - hugeParam
        - commentedOutCode
        - emptyDecl
        - filepathJoin
        - commentedOutImport
        - initClause
        - nestingReduce
        - preferFilepathJoin
    godot:
      capital: true
      period: true
    gosec:
      excludes:
        - G101
    importas:
      alias:
        - pkg: github.com/cloudposse/atmos/pkg/logger
          alias: log
      no-unaliased: true
      no-extra-aliases: false
    # Custom linter configurations (module plugins)
    # These settings only apply when using the custom-gcl binary built via `golangci-lint custom`.
    # Standard golangci-lint binary will not have these linters available.
    #
    # Each custom linter must:
    # - Be listed in .custom-gcl.yml plugins section
    # - Be enabled in the linters.enable list above
    # - Have type: "module" specified here
    # - Implement the golangci-lint plugin interface
    #
    # To add a new custom linter configuration:
    # Add a new section here with your linter's name and settings.
    custom:
      lintroller:
        type: "module"  # Required: indicates this is a module plugin (not Go .so plugin)
        description: "Atmos project-specific linting rules (t.Setenv/os.Setenv/os.MkdirTemp checks)"
        settings:
          # These settings are passed to the plugin's Settings struct (see tools/lintroller/plugin.go)
          # Each rule can be independently enabled/disabled
          tsetenv-in-defer: true      # Detects t.Setenv called inside defer blocks (use os.Setenv in defer instead)
          os-setenv-in-test: true     # Detects os.Setenv in test files (use t.Setenv instead for auto cleanup)
          os-mkdirtemp-in-test: true  # Detects os.MkdirTemp in test files (use t.TempDir instead for auto cleanup)

      # Example: Add another custom linter configuration
      # another-linter:
      #   type: "module"
      #   description: "Another custom linter"
      #   settings:
      #     some-rule: true
    lll:
      line-length: 120
      tab-width: 4
    loggercheck:
      kitlog: false
      klog: false
      logr: false
      slog: false
      zap: false
      require-string-key: true
      no-printf-like: true
      rules:
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Info
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Error
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Warn
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Debug
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Fatal
        - (github.com/cloudposse/atmos/pkg/logger.AtmosLogger).Trace
    nestif:
      min-complexity: 4
    revive:
      rules:
        - name: banned-characters
          arguments:
            - goto
        - name: error-strings
          arguments:
            - disallow-newlines: true
        - name: file-length-limit
          arguments:
            - max: 500
              skipBlankLines: true
              skipComments: true
        - name: function-length
          arguments:
            - 50
            - 60
        - name: function-result-limit
          arguments:
            - 3
        - name: cognitive-complexity
          arguments:
            - 25
        - name: cyclomatic
          arguments:
            - 10
        - name: add-constant
          arguments:
            - allowFloats: 0.0,0.,1.0,1.,2.0,2.
              allowInts: 0,1,2,3,4
              allowStrs: '"","image","error","path","import","path","%w","%s","file","/"'
              maxLitCount: "3"
        - name: argument-limit
          arguments:
            - 5
        - name: deep-exit
        - name: early-return
        - name: comment-spacings
          arguments:
            - mypragma
            - otherpragma
          disabled: false
        - name: var-declaration
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - err113
          - errcheck
          - forbidigo
          - funlen
          - gocognit
          - gosec
          - revive
        path: _test\.go$
      - linters:
          - cyclop
        path: (.+)_test\.go
      # Allow fmt.Errorf when wrapping static errors from errUtils package
      - linters:
          - err113
        source: 'fmt\.Errorf\("%w: .+", errUtils\.'
      # Allow fmt.Errorf when wrapping any static Err* variable
      - linters:
          - err113
        source: 'fmt\.Errorf\("%w: .+", Err[A-Z]'
      # Allow errors.Join with fmt.Errorf for converting strings to errors
      - linters:
          - err113
        path: ".*"
        source: 'errors\.Join\(.*errUtils\..*fmt\.Errorf'
    paths:
      - experiments/.*
      - third_party$
      - builtin$
      - examples$
issues:
  max-issues-per-linter: 0
  max-same-issues: 0

severity:
  default: error
  rules:
    - linters:
        - revive
      text: "cognitive-complexity|cyclomatic|function-length|function-result-limit|comment-spacings"
      severity: warning
    - linters:
        - nestif
        - nolintlint
      severity: warning
formatters:
  enable:
    - gofumpt
    - goimports
  exclusions:
    generated: lax
    paths:
      - experiments/.*
      - third_party$
      - builtin$
      - examples$
      - _test\.go$
